"use client";

import { useSession } from 'next-auth/react';
import { useRouter } from 'next/navigation';
import { format } from 'date-fns';
import {
  Bookmark, Calendar, CheckCircle, Clock, ExternalLink, FileText,
  GraduationCap, Target, BookOpen, Award, BarChart2, ChevronDown,
  ArrowRight, Play, CheckSquare, Lock, AlertCircle, Video,
  Download, Edit2, Users, Star, ArrowUpRight, Zap, Layers,
  ArrowLeft, Circle, MessageCircle, Share, GitBranch, GitCommit,
  FileEdit
} from 'lucide-react';
import React, { useState, useEffect, useMemo } from 'react';
import Link from 'next/link';
import Image from 'next/image';

// Import UI components
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Skeleton } from '@/components/ui/skeleton';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';

// Types
interface Lesson {
  id: string;
  title: string;
  description?: string;
  duration: number;
  completed: boolean;
  order: number;
  videoUrl?: string;
  content?: string;
  type?: 'video' | 'text' | 'quiz' | 'assignment';
  isPreview?: boolean;
}

interface Module {
  id: string;
  title: string;
  description?: string;
  order: number;
  lessons: Lesson[];
  progress?: number;
}

interface Course {
  id: string;
  title: string;
  description: string;
  instructor: string;
  thumbnailUrl?: string;
  duration: number;
  level: 'beginner' | 'intermediate' | 'advanced';
  category: string;
  modules: Module[];
  createdAt: string | Date;
  updatedAt: string | Date;
  rating?: number;
  studentCount?: number;
  progress?: number;
}

interface Commit {
  id: string;
  title: string;
  description?: string;
  date: Date | string;
  author: string;
  changes: number;
  status: 'pending' | 'approved' | 'rejected' | 'needs-review';
}

interface StudentProgress {
  courseId: string;
  completedLessons: number;
  totalLessons: number;
  lastAccessed: Date;
  projects: Project[];
  commits: Commit[];
  grades: Grade[];
  completionPercentage: number;
  nextLesson?: {
    moduleId: string;
    lessonId: string;
    title: string;
    type?: 'video' | 'text' | 'quiz' | 'assignment';
    description?: string;
  };
  streak?: number;
  timeSpent?: number; // in minutes
  certificateEligible?: boolean;
  lastCommit?: Date | string;
  activityScore?: number;
}

interface Project {
  id: string;
  title: string;
  description: string;
  dueDate?: Date | string;
  completed: boolean;
  grade?: number;
  feedback?: string;
  status?: 'not-started' | 'in-progress' | 'submitted' | 'reviewed';
  collaborators?: string[];
  tags?: string[];
  resources?: {title: string, url: string}[];
}

interface Grade {
  id: string;
  title: string;
  score: number;
  maxScore: number;
  type: 'quiz' | 'assignment' | 'project' | 'exam';
  date: Date;
}

interface StudentCourseDashboardProps {
  courses: Course[];
}

// Helper functions
const getLevelColor = (level: string) => {
  switch(level.toLowerCase()) {
    case 'beginner': return 'bg-green-100 text-green-800';
    case 'intermediate': return 'bg-blue-100 text-blue-800';
    case 'advanced': return 'bg-purple-100 text-purple-800';
    default: return 'bg-gray-100 text-gray-800';
  }
};

const getLevelIcon = (level: string) => {
  switch(level.toLowerCase()) {
    case 'beginner': return <BookOpen className="h-4 w-4" />;
    case 'intermediate': return <Award className="h-4 w-4" />;
    case 'advanced': return <GraduationCap className="h-4 w-4" />;
    default: return <Target className="h-4 w-4" />;
  }
};

const getCategoryColor = (category: string) => {
  const categories: Record<string, string> = {
    'web development': 'bg-blue-100 text-blue-800',
    'data science': 'bg-green-100 text-green-800',
    'mobile development': 'bg-purple-100 text-purple-800',
    'design': 'bg-pink-100 text-pink-800',
    'business': 'bg-amber-100 text-amber-800',
    'marketing': 'bg-orange-100 text-orange-800',
    'programming': 'bg-indigo-100 text-indigo-800',
  };
  
  return categories[category.toLowerCase()] || 'bg-gray-100 text-gray-800';
};

export default function StudentCourseDashboard({ courses = [] }: StudentCourseDashboardProps) {
  // Add CSS for decorative background grid
  const gridBgStyle = `
    .bg-grid-slate-100 {
      background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 32 32' width='32' height='32' fill='none' stroke='%23e2e8f0'%3e%3cpath d='M0 .5H31.5V32'/%3e%3c/svg%3e");
    }
  `;
  const { data: session } = useSession();
  const router = useRouter();
  
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [expandedCourse, setExpandedCourse] = useState<string | null>(null);
  const [activeTabs, setActiveTabs] = useState<Record<string, string>>({});
  const [activeLesson, setActiveLesson] = useState<{courseId: string; moduleId: string; lessonId: string} | null>(null);
  const [studentProgress, setStudentProgress] = useState<Record<string, StudentProgress>>({});
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);

  // Format duration in minutes to a readable string
  const formatDuration = (minutes: number | null): string => {
    if (!minutes) return 'N/A';
    const hours = Math.floor(minutes / 60);
    const mins = minutes % 60;
    return hours > 0 ? `${hours}h ${mins}m` : `${mins}m`;
  };

  // Calculate course progress
  const calculateCourseProgress = (course: Course): StudentProgress => {
    const totalLessons = course.modules.reduce(
      (total, module) => total + (module.lessons?.length || 0),
      0
    );
    
    const completedLessons = course.modules.reduce(
      (total, module) => total + (module.lessons?.filter(l => l.completed).length || 0),
      0
    );
    
    const completionPercentage = totalLessons > 0 
      ? Math.round((completedLessons / totalLessons) * 100) 
      : 0;

    // Find next uncompleted lesson
    let nextLesson = undefined;
    for (const module of course.modules) {
      const uncompleted = module.lessons?.find(lesson => !lesson.completed);
      if (uncompleted) {
        nextLesson = {
          moduleId: module.id,
          lessonId: uncompleted.id,
          title: uncompleted.title,
          type: uncompleted.type,
          description: uncompleted.description
        };
        break;
      }
    }
    
    // Mock data for projects
    const mockProjects: Project[] = [
      {
        id: 'project-1',
        title: 'Portfolio Website',
        description: 'Build a responsive portfolio website showcasing your skills and projects',
        dueDate: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000), // 7 days from now
        completed: false,
        status: 'in-progress',
        tags: ['frontend', 'responsive', 'portfolio'],
        resources: [{ title: 'Design Template', url: '#' }]
      },
      {
        id: 'project-2',
        title: 'E-commerce API',
        description: 'Create a RESTful API for an e-commerce platform with authentication',
        dueDate: new Date(new Date().getTime() + 14 * 24 * 60 * 60 * 1000), // 14 days from now
        completed: false,
        status: 'not-started',
        tags: ['backend', 'api', 'e-commerce'],
        resources: [{ title: 'API Specification', url: '#' }]
      },
      {
        id: 'project-3',
        title: 'Database Design',
        description: 'Design and implement a relational database schema for the learning platform',
        dueDate: new Date(new Date().getTime() - 3 * 24 * 60 * 60 * 1000), // 3 days ago
        completed: true,
        grade: 92,
        feedback: 'Excellent work on normalization and indexing. Consider adding more documentation.',
        status: 'reviewed',
        tags: ['database', 'sql', 'schema']
      }
    ];

    // Mock data for commits
    const mockCommits: Commit[] = [
      {
        id: 'commit-1',
        title: 'Implemented user authentication',
        description: 'Added JWT token-based authentication for user login',
        date: new Date(new Date().getTime() - 2 * 24 * 60 * 60 * 1000), // 2 days ago
        author: 'Student',
        changes: 147,
        status: 'approved'
      },
      {
        id: 'commit-2',
        title: 'Fixed responsive layout issues',
        description: 'Resolved issues with the dashboard on mobile devices',
        date: new Date(new Date().getTime() - 1 * 24 * 60 * 60 * 1000), // 1 day ago
        author: 'Student',
        changes: 56,
        status: 'needs-review'
      },
      {
        id: 'commit-3',
        title: 'Added unit tests for API endpoints',
        description: 'Implemented Jest tests with 85% coverage',
        date: new Date(), // today
        author: 'Student',
        changes: 210,
        status: 'pending'
      }
    ];
    
    // In a real app, this data would come from an API
    return {
      courseId: course.id,
      completedLessons,
      totalLessons,
      lastAccessed: new Date(),
      projects: mockProjects,
      commits: mockCommits,
      grades: [],
      completionPercentage,
      nextLesson,
      streak: 5,
      timeSpent: 320, // example: 320 minutes
      certificateEligible: completionPercentage >= 80,
      lastCommit: mockCommits[0].date,
      activityScore: 78
    };
  };

  // Initialize active tabs and progress when courses are loaded
  useEffect(() => {
    if (courses.length > 0) {
      setLoading(true); // Show loading state initially
      
      const initialTabs = courses.reduce<Record<string, string>>((acc, course) => {
        acc[course.id] = 'overview';
        return acc;
      }, {});
      
      const initialProgress = courses.reduce<Record<string, StudentProgress>>((acc, course) => {
        // Add some mock data for the improved UI elements
        const progress = calculateCourseProgress(course);
        progress.streak = Math.floor(Math.random() * 15) + 1; // 1-15 day streak
        progress.timeSpent = Math.floor(Math.random() * 300) + 60; // 60-360 minutes spent
        progress.certificateEligible = progress.completionPercentage >= 80;
        
        if (course.modules.length > 0) {
          // Add progress to each module
          course.modules.forEach(module => {
            const completedLessons = module.lessons.filter(l => l.completed).length;
            const totalLessons = module.lessons.length;
            module.progress = totalLessons > 0 ? Math.round((completedLessons / totalLessons) * 100) : 0;
            
            // Add lesson types and previews for enhanced UI
            module.lessons.forEach((lesson, idx) => {
              lesson.type = idx % 3 === 0 ? 'video' : idx % 3 === 1 ? 'quiz' : 'text';
              lesson.isPreview = idx === 0; // Make first lesson a preview
              lesson.description = lesson.description || `${lesson.type === 'video' ? 'Watch' : lesson.type === 'quiz' ? 'Take' : 'Read'} this lesson to learn important concepts.`;
            });
          });
        }
        
        acc[course.id] = progress;
        return acc;
      }, {});
      
      setActiveTabs(initialTabs);
      setStudentProgress(initialProgress);
      
      // Simulate loading time for better UX
      setTimeout(() => setLoading(false), 500);
    }
  }, [courses]);

  const toggleCourseExpand = (courseId: string) => {
    setExpandedCourse(expandedCourse === courseId ? null : courseId);
  };

  const handleTabChange = (courseId: string, tab: string) => {
    setActiveTabs(prev => ({
      ...prev,
      [courseId]: tab
    }));
  };

  const handleNavigateToLesson = (courseId: string, moduleId: string, lessonId: string) => {
    router.push(`/courses/${courseId}/modules/${moduleId}/lessons/${lessonId}`);
  };
  
  const handleNavigateToProject = (courseId: string, projectId: string) => {
    router.push(`/courses/${courseId}/projects/${projectId}`);
  };

  const handleNavigateToCommit = (courseId: string, commitId: string) => {
    router.push(`/courses/${courseId}/commits/${commitId}`);
  };

                  {[1, 2, 3].map((i) => (
                    <div key={i} className="flex justify-between items-center">
                      <div className="space-y-1">
                        <Skeleton className="h-5 w-64" />
                        <Skeleton className="h-4 w-32" />
                      </div>
                      <Skeleton className="h-10 w-10 rounded-full" />
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          </div>
          
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <Skeleton className="h-6 w-32" />
              </CardHeader>
              <CardContent className="space-y-4">
                <Skeleton className="h-24 w-full rounded-xl" />
                <div className="space-y-2">
                  <Skeleton className="h-4 w-3/4" />
                  <Skeleton className="h-4 w-1/2" />
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="flex flex-col items-center justify-center h-[60vh]">
        <div className="text-center p-6 max-w-md">
          <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
          <h3 className="text-xl font-semibold text-gray-900 mb-2">Error Loading Course</h3>
          <p className="text-gray-600 mb-6">{error}</p>
          <Button 
            onClick={() => window.location.reload()}
            variant="default"
            size="lg"
            className="px-6"
          >
            Try Again
          </Button>
        </div>
      </div>
    );
  }

  // No courses message
  if (courses.length === 0) {
    return (
      <div className="flex flex-col items-center justify-center min-h-[60vh]">
        <div className="text-center p-6 max-w-md">
          <BookOpen className="w-16 h-16 text-blue-500 mx-auto mb-4 opacity-80" />
          <h3 className="text-2xl font-semibold text-gray-900 mb-2">No Course Selected</h3>
          <p className="text-gray-600 mb-6">You are not enrolled in any courses yet. Explore our catalog to start your learning journey.</p>
          <Button
            onClick={() => router.push('/courses')}
            size="lg"
            className="px-6"
          >
            <Layers className="mr-2 h-5 w-5" /> Browse Courses
          </Button>
        </div>
      </div>
    );
  }

  const currentCourse = courses[0]; // Since we're viewing a single course detail
  const progress = currentCourse ? studentProgress[currentCourse.id] || calculateCourseProgress(currentCourse) : null;

  // Main course dashboard render
  return (
    <div className="bg-slate-50 min-h-screen pb-12">
      <style jsx>{gridBgStyle}</style>
      {/* Course Header */}
      <div className="bg-gradient-to-b from-white to-slate-50 border-b shadow-sm relative overflow-hidden">
        {/* Premium visual element - decorative dots */}
        <div className="absolute inset-0 bg-grid-slate-100 [mask-image:linear-gradient(0deg,rgba(255,255,255,0.5),rgba(255,255,255,0))] -z-10"></div>
        
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8 relative">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div>
              <div className="flex items-center gap-2 mb-2">
                <Badge className={`${getLevelColor(courses[0].level)} rounded-md px-2.5 py-1 font-medium`}>
                  <span className="flex items-center gap-1.5">
                    {getLevelIcon(courses[0].level)}
                    {courses[0].level.charAt(0).toUpperCase() + courses[0].level.slice(1)}
                  </span>
                </Badge>
                <Badge className={`${getCategoryColor(courses[0].category)} rounded-md px-2.5 py-1 font-medium`}>
                  {courses[0].category}
                </Badge>
                {/* New premium badge */}
                <Badge className="bg-gradient-to-r from-amber-500 to-amber-300 text-white border-0 rounded-md px-2.5 py-1 font-medium">
                  <Star className="h-3 w-3 mr-1 fill-white" /> Premium
                </Badge>
              </div>
              <h1 className="text-2xl sm:text-3xl md:text-4xl font-bold tracking-tight text-gray-900 mb-2">
                {courses[0].title}
              </h1>
              <p className="text-gray-600 text-sm md:text-base max-w-2xl mb-3">
                {courses[0].description.length > 150 ? courses[0].description.substring(0, 150) + '...' : courses[0].description}
              </p>
              <div className="flex flex-wrap items-center gap-6 text-sm text-gray-500">
                <div className="flex items-center gap-1.5">
                  <div className="p-1.5 bg-blue-50 rounded-full">
                    <Clock className="h-4 w-4 text-blue-600" />
                  </div>
                  <span className="font-medium">{formatDuration(courses[0].duration)}</span>
                </div>
                {courses[0].rating && (
                  <div className="flex items-center gap-1.5">
                    <div className="p-1.5 bg-amber-50 rounded-full">
                      <Star className="h-4 w-4 text-amber-600" />
                    </div>
                    <span className="font-medium">{courses[0].rating.toFixed(1)} Rating</span>
                  </div>
                )}
                {courses[0].studentCount && (
                  <div className="flex items-center gap-1.5">
                    <div className="p-1.5 bg-indigo-50 rounded-full">
                      <Users className="h-4 w-4 text-indigo-600" />
                    </div>
                    <span className="font-medium">{courses[0].studentCount.toLocaleString()} enrolled</span>
                  </div>
                )}
              </div>
            </div>
            
            <div className="flex flex-col gap-3 mt-6 md:mt-0 md:ml-auto md:flex-shrink-0">
              {/* Progress ring */}
              <div className="hidden md:flex items-center justify-center mb-2">
                <div className="relative w-20 h-20">
                  <svg className="w-full h-full" viewBox="0 0 36 36">
                    <path
                      className="stroke-slate-200"
                      fill="none"
                      strokeWidth="3.8"
                      d="M18 2.0845
                      a 15.9155 15.9155 0 0 1 0 31.831
                      a 15.9155 15.9155 0 0 1 0 -31.831"
                    />
                    <path
                      className="stroke-blue-600"
                      fill="none"
                      strokeWidth="3.8"
                      strokeLinecap="round"
                      strokeDasharray={`${(studentProgress[courses[0].id]?.completionPercentage || 0)}, 100`}
                      d="M18 2.0845
                      a 15.9155 15.9155 0 0 1 0 31.831
                      a 15.9155 15.9155 0 0 1 0 -31.831"
                    />
                    <text x="18" y="20.5" className="text-blue-600 font-bold text-5" textAnchor="middle">
                      {(studentProgress[courses[0].id]?.completionPercentage || 0)}%
                    </text>
                  </svg>
                </div>
              </div>
              
              <div className="flex items-center gap-3">
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => router.push('/dashboard/student/courses')}
                  className="text-gray-600 shadow-sm hover:bg-slate-50"
                >
                  <ArrowLeft className="mr-1 h-4 w-4" /> Back to Courses
                </Button>
                <Button 
                  size="sm"
                  className="bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 text-white shadow-md hover:shadow-lg transition-all"
                  onClick={() => {
                    const progress = studentProgress[courses[0].id] || calculateCourseProgress(courses[0]);
                    if (progress?.nextLesson) {
                      handleNavigateToLesson(
                        courses[0].id,
                        progress.nextLesson.moduleId,
                        progress.nextLesson.lessonId
                      );
                    }
                  }}
                  disabled={!studentProgress[courses[0].id]?.nextLesson}
                >
                  {studentProgress[courses[0].id]?.nextLesson ? (
                    <>
                      <Play className="mr-1 h-4 w-4 fill-current" /> Continue Learning
                    </>
                  ) : (
                    <>
                      <CheckSquare className="mr-1 h-4 w-4" /> Course Completed
                    </>
                  )}
                </Button>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Course Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Main Content Area */}
          <div className="lg:col-span-2 space-y-8">
            {/* Progress Card */}
            <Card className="overflow-hidden border-0 shadow-lg">
              <div className="bg-gradient-to-r from-blue-600 to-indigo-600 text-white py-5 px-6">
                <div className="flex items-center justify-between mb-4">
                  <h3 className="text-xl font-semibold flex items-center">
                    <BarChart2 className="mr-2 h-5 w-5" />
                    Your Learning Progress
                  </h3>
                  <Badge className="bg-white/20 hover:bg-white/30 text-white border-0">
                    {(studentProgress[courses[0].id]?.completionPercentage || 0)}% Complete
                  </Badge>
                </div>
                
                <div className="flex items-center mb-4">
                  <div className="w-full">
                    <div className="bg-white/20 h-2.5 rounded-full w-full">
                      <div 
                        className={`h-2.5 rounded-full ${studentProgress[courses[0].id]?.completionPercentage === 100 ? 'bg-green-400' : 'bg-white'}`} 
                        style={{ width: `${(studentProgress[courses[0].id]?.completionPercentage || 0)}%` }}
                      ></div>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center text-sm justify-between">
                  <span>Progress</span>
                  <span className="font-medium">
                    {(studentProgress[courses[0].id]?.completedLessons || 0)}/{(studentProgress[courses[0].id]?.totalLessons || 0)} lessons completed
                  </span>
                </div>
              </div>
              
              <CardContent className="p-6">
                <div className="grid grid-cols-1 sm:grid-cols-3 gap-6">
                  <div className="flex items-center gap-4 p-4 bg-gradient-to-br from-blue-50 to-blue-100 rounded-xl border border-blue-200/50 shadow-sm">
                    <div className="rounded-full bg-blue-600/10 p-2.5 text-blue-600">
                      <Clock className="h-6 w-6" />
                    </div>
                    <div>
                      <p className="text-xs font-medium text-blue-600 uppercase tracking-wider">Time Spent</p>
                      <p className="text-xl font-bold text-gray-900">{formatDuration(studentProgress[courses[0].id]?.timeSpent || 0)}</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-4 p-4 bg-gradient-to-br from-amber-50 to-amber-100 rounded-xl border border-amber-200/50 shadow-sm">
                    <div className="rounded-full bg-amber-600/10 p-2.5 text-amber-600">
                      <Zap className="h-6 w-6" />
                    </div>
                    <div>
                      <p className="text-xs font-medium text-amber-600 uppercase tracking-wider">Day Streak</p>
                      <p className="text-xl font-bold text-gray-900">{studentProgress[courses[0].id]?.streak || 0} days</p>
                    </div>
                  </div>
                  <div className="flex items-center gap-4 p-4 bg-gradient-to-br from-green-50 to-green-100 rounded-xl border border-green-200/50 shadow-sm">
                    <div className="rounded-full bg-green-600/10 p-2.5 text-green-600">
                      <Award className="h-6 w-6" />
                    </div>
                    <div>
                      <p className="text-xs font-medium text-green-600 uppercase tracking-wider">Certificate</p>
                      {(studentProgress[courses[0].id]?.certificateEligible) ? 
                        <p className="text-green-600 font-bold">Eligible</p> : 
                        <p className="text-gray-500 font-medium">After completion</p>
                      }
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Course Content - Modules & Lessons */}
            <Card className="border-0 shadow-lg overflow-hidden">
              <CardHeader className="border-b bg-white px-6">
                <CardTitle className="text-lg font-semibold flex items-center">
                  <Layers className="mr-2 h-5 w-5 text-blue-600" />
                  Course Content
                </CardTitle>
              </CardHeader>
              <ScrollArea className="h-[max(40vh,450px)] pr-4">
                <CardContent className="p-0">
                  <div className="divide-y">
                    {courses[0].modules.map((module, moduleIndex) => (
                      <div key={module.id} className="py-2 hover:bg-slate-50/50 transition-colors">
                        {/* Module Header */}
                        <div className="px-6 py-4">
                          <div className="flex items-center justify-between">
                            <div className="flex-1">
                              <div className="flex items-center">
                                <span className="flex items-center justify-center bg-blue-100 text-blue-700 rounded-full w-8 h-8 font-medium mr-3 flex-shrink-0">
                                  {moduleIndex + 1}
                                </span>
                                <h3 className="text-lg font-medium text-gray-900">
                                  {module.title}
                                </h3>
                              </div>
                              {module.description && (
                                <p className="text-sm text-gray-500 mt-1.5 ml-11">{module.description}</p>
                              )}
                            </div>
                            <div className="ml-4 flex-shrink-0 flex flex-col items-end">
                              <Badge variant="outline" className="font-medium border-blue-200 text-blue-700 mb-2">
                                {module.lessons.length} {module.lessons.length === 1 ? 'lesson' : 'lessons'}
                              </Badge>
                              {module.progress !== undefined && module.progress === 100 && (
                                <Badge className="bg-green-100 text-green-800 border-0">
                                  <CheckCircle className="mr-1 h-3.5 w-3.5" /> Completed
                                </Badge>
                              )}
                            </div>
                          </div>
                          {/* Module Progress */}
                          {module.progress !== undefined && (
                            <div className="mt-3 ml-11">
                              <div className="flex justify-between text-xs mb-1.5">
                                <span className="text-gray-500 font-medium">{module.progress}% complete</span>
                              </div>
                              <div className="bg-gray-200 h-1.5 rounded-full w-full">
                                <div 
                                  className={`h-1.5 rounded-full ${module.progress === 100 ? 'bg-green-500' : 'bg-blue-600'}`} 
                                  style={{ width: `${module.progress}%` }}
                                ></div>
                              </div>
                            </div>
                          )}
                        </div>

                        {/* Lessons */}
                        <ul className="divide-y divide-gray-100 ml-11 mt-1 mb-2">
                          {module.lessons.map((lesson, lessonIndex) => {
                            const isActive = activeLesson && 
                              activeLesson.courseId === courses[0].id && 
                              activeLesson.moduleId === module.id && 
                              activeLesson.lessonId === lesson.id;
                            
                            return (
                              <li 
                                key={lesson.id}
                                className={`px-5 py-3.5 rounded-lg my-1 transition-all ${isActive ? 'bg-blue-50 shadow-sm' : 'hover:bg-slate-50'}`}
                              >
                                <button 
                                  onClick={() => handleNavigateToLesson(courses[0].id, module.id, lesson.id)}
                                  className="w-full flex items-center justify-between text-left"
                                >
                                  <div className="flex items-center gap-3 flex-1">
                                    <div className={`
                                      flex-shrink-0 rounded-full w-7 h-7 flex items-center justify-center
                                      ${lesson.completed ? 'bg-green-100 text-green-600' : 
                                        lesson.isPreview ? 'bg-blue-100 text-blue-600' : 'bg-slate-100 text-slate-500'}
                                    `}>
                                      {lesson.completed ? 
                                        <CheckCircle className="h-4 w-4" /> : 
                                        lesson.isPreview ? 
                                          <Play className="h-4 w-4" /> : 
                                          <Lock className="h-4 w-4" />
                                      }
                                    </div>
                                    <div className="flex-1">
                                      <div className="flex items-center">
                                        <span className="text-sm font-medium mr-2 text-slate-400">1.{lessonIndex + 1}</span>
                                        <p className={`text-sm font-medium ${isActive ? 'text-blue-700' : 'text-gray-900'}`}>
                                          {lesson.title}
                                        </p>
                                      </div>
                                      {lesson.description && (
                                        <p className="text-xs text-gray-500 mt-1 line-clamp-1 ml-6">{lesson.description}</p>
                                      )}
                                    </div>
                                  </div>
                                  <div className="flex items-center ml-3 gap-2">
                                    {lesson.type === 'video' && 
                                      <Badge className="bg-blue-50 text-blue-700 border-0">
                                        <Video className="h-3 w-3 mr-1" /> Video
                                      </Badge>
                                    }
                                    {lesson.type === 'quiz' && 
                                      <Badge className="bg-purple-50 text-purple-700 border-0">
                                        <FileText className="h-3 w-3 mr-1" /> Quiz
                                      </Badge>
                                    }
                                    {lesson.type === 'text' && 
                                      <Badge className="bg-slate-50 text-slate-700 border-0">
                                        <BookOpen className="h-3 w-3 mr-1" /> Text
                                      </Badge>
                                    }
                                    {lesson.isPreview && 
                                      <Badge className="bg-amber-50 text-amber-700 border-0">
                                        Free Preview
                                      </Badge>
                                    }
                                    <span className="text-xs text-gray-500 min-w-[50px] text-right">{formatDuration(lesson.duration)}</span>
                                  </div>
                                </button>
                              </li>
                            );
                          })}
                        </ul>
                      </div>
                    ))}
                  </div>
                </CardContent>
              </ScrollArea>
            </Card>

            {/* Projects Section */}
            <Card className="border-0 shadow-lg overflow-hidden">
              <CardHeader className="border-b bg-white px-6">
                <CardTitle className="text-lg font-semibold flex items-center">
                  <FileText className="mr-2 h-5 w-5 text-blue-600" />
                  Projects & Assignments
                </CardTitle>
              </CardHeader>
              <CardContent className="p-6 space-y-5">
                {studentProgress[courses[0]?.id]?.projects?.length > 0 ? (
                  <div className="space-y-4">
                    {studentProgress[courses[0].id].projects.map((project) => (
                      <div 
                        key={project.id} 
                        className="border border-blue-100 rounded-xl overflow-hidden shadow-sm transition-all hover:shadow-md"
                      >
                        <div className="flex justify-between items-center border-b border-blue-50 bg-gradient-to-r from-slate-50 to-blue-50 px-4 py-3">
                          <div className="flex items-center">
                            <div className="rounded-md p-2 mr-3 bg-white border border-blue-100">
                              {project.completed ? (
                                <CheckCircle className="h-5 w-5 text-green-500" />
                              ) : (
                                <Clock className="h-5 w-5 text-blue-500" />
                              )}
                            </div>
                            <div>
                              <h4 className="font-medium text-gray-900">{project.title}</h4>
                              <p className="text-xs text-gray-500">
                                {project.status === 'reviewed' ? 'Graded' : 
                                 project.status === 'submitted' ? 'Submitted' :
                                 project.status === 'in-progress' ? 'In Progress' : 'Not Started'}
                              </p>
                            </div>
                          </div>
                          <div>
                            {project.completed ? (
                              <Badge className="bg-green-100 text-green-800 border-0">
                                {project.grade ? `${project.grade}%` : 'Completed'}
                              </Badge>
                            ) : (
                              <Badge className="bg-amber-100 text-amber-800 border-0">
                                {typeof project.dueDate === 'object' ? 
                                  `Due ${format(new Date(project.dueDate), 'MMM d')}` : 
                                  typeof project.dueDate === 'string' ?
                                  `Due ${project.dueDate}` : 'No deadline'}
                              </Badge>
                            )}
                          </div>
                        </div>
                        
                        <div className="p-4 bg-white">
                          <p className="text-sm text-gray-600 mb-3">{project.description}</p>
                          
                          {project.tags && project.tags.length > 0 && (
                            <div className="flex flex-wrap gap-1 mb-3">
                              {project.tags.map(tag => (
                                <Badge key={tag} variant="outline" className="text-xs bg-slate-50">
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                          )}

                          <div className="flex justify-between items-center mt-2">
                            <div className="flex gap-2">
                              {project.resources && project.resources.map((resource) => (
                                <Button key={resource.title} variant="ghost" size="sm" className="h-8 text-blue-600 p-0">
                                  <FileText className="h-3.5 w-3.5 mr-1" /> {resource.title}
                                </Button>
                              ))}
                            </div>
                            <Button 
                              size="sm" 
                              onClick={() => handleNavigateToProject(courses[0].id, project.id)}
                              className="bg-blue-50 hover:bg-blue-100 text-blue-700 border border-blue-200"
                            >
                              {project.completed ? 'View Submission' : 'Continue'}
                            </Button>
                          </div>
                          
                          {project.feedback && (
                            <div className="mt-3 p-3 bg-green-50 border border-green-100 rounded-lg text-sm text-green-800">
                              <div className="font-medium mb-1 flex items-center">
                                <MessageCircle className="h-3.5 w-3.5 mr-1.5" /> Instructor Feedback
                              </div>
                              <p>{project.feedback}</p>
                            </div>
                          )}
                        </div>
                      </div>
                    ))}
                  </div>
                ) : (
                  <div className="text-center py-8">
                    <div className="bg-blue-50 inline-flex rounded-full p-3 mb-4">
                      <FileText className="h-6 w-6 text-blue-500" />
                    </div>
                    <h3 className="text-lg font-medium text-gray-900">No projects yet</h3>
                    <p className="text-gray-500 mt-1 mb-4">Projects will appear here when assigned</p>
                    <Button variant="outline">
                      Browse practice projects
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>

            {/* Commits Section */}
            <Card className="border-0 shadow-lg overflow-hidden">
              <CardHeader className="border-b bg-white px-6">
                <div className="flex justify-between items-center">
                  <CardTitle className="text-lg font-semibold flex items-center">
                    <GitBranch className="mr-2 h-5 w-5 text-blue-600" />
                    Recent Commits
                  </CardTitle>
                  <Badge className="bg-blue-100 text-blue-700 border-0">
                    Activity Score: {studentProgress[courses[0]?.id]?.activityScore || 0}/100
                  </Badge>
                </div>
              </CardHeader>
              <CardContent className="p-0">
                {studentProgress[courses[0]?.id]?.commits?.length > 0 ? (
                  <div>
                    <ScrollArea className="h-[300px]">
                      <div className="divide-y">
                        {studentProgress[courses[0].id].commits.map((commit) => {
                          let statusColor = {
                            'approved': 'text-green-600 bg-green-50 border-green-100',
                            'rejected': 'text-red-600 bg-red-50 border-red-100',
                            'needs-review': 'text-amber-600 bg-amber-50 border-amber-100',
                            'pending': 'text-blue-600 bg-blue-50 border-blue-100',
                          }[commit.status];
                          
                          return (
                            <div key={commit.id} className="p-4 hover:bg-slate-50/80">
                              <div className="flex justify-between items-start">
                                <div className="flex-1">
                                  <div className="flex items-center">
                                    <div className="rounded-full p-1.5 bg-blue-100 mr-3">
                                      <GitCommit className="h-4 w-4 text-blue-700" />
                                    </div>
                                    <h4 className="font-medium text-gray-900">{commit.title}</h4>
                                  </div>
                                  {commit.description && (
                                    <p className="text-sm text-gray-600 mt-1 ml-9">{commit.description}</p>
                                  )}
                                </div>
                                <Badge className={`${statusColor} border ml-3 whitespace-nowrap`}>
                                  {commit.status.replace('-', ' ')}
                                </Badge>
                              </div>
                              
                              <div className="flex items-center justify-between mt-3 ml-9 text-xs text-gray-500">
                                <div className="flex items-center space-x-4">
                                  <span className="flex items-center">
                                    <Calendar className="h-3.5 w-3.5 mr-1.5" />
                                    {typeof commit.date === 'object' ? 
                                      format(new Date(commit.date), 'MMM d, yyyy') : commit.date}
                                  </span>
                                  <span className="flex items-center">
                                    <FileEdit className="h-3.5 w-3.5 mr-1.5" />
                                    {commit.changes} changes
                                  </span>
                                </div>
                                
                                <Button 
                                  variant="ghost" 
                                  size="sm" 
                                  className="text-blue-600 h-8 p-0"
                                  onClick={() => handleNavigateToCommit(courses[0].id, commit.id)}
                                >
                                  View details
                                  <ArrowRight className="ml-1 h-3.5 w-3.5" />
                                </Button>
                              </div>
                            </div>
                          );
                        })}
                      </div>
                    </ScrollArea>
                    
                    <div className="border-t p-4 bg-slate-50/80">
                      <Button className="w-full bg-white border border-blue-200 text-blue-700 hover:bg-blue-50">
                        View all commits
                      </Button>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <div className="bg-blue-50 inline-flex rounded-full p-3 mb-4">
                      <GitBranch className="h-6 w-6 text-blue-500" />
                    </div>
                    <h3 className="text-lg font-medium text-gray-900">No commits yet</h3>
                    <p className="text-gray-500 mt-1">Submit your first code commit to see activity here</p>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Sidebar */}
          <div className="space-y-6">
            {/* Instructor Card */}
            <Card className="border-0 shadow-lg overflow-hidden">
              <CardHeader className="pb-0 pt-5">
                <CardTitle className="text-lg font-medium flex items-center">
                  <Users className="h-5 w-5 mr-2 text-blue-600" />
                  About the Instructor
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-5">
                <div className="flex items-center gap-4 mb-4">
                  <Avatar className="w-16 h-16 border-2 border-blue-100 shadow-sm">
                    <AvatarImage src="/placeholder-avatar.jpg" alt="Instructor" />
                    <AvatarFallback className="bg-gradient-to-br from-blue-500 to-blue-600 text-white text-lg">
                      {courses[0].instructor.charAt(0)}
                    </AvatarFallback>
                  </Avatar>
                  <div>
                    <h4 className="text-lg font-semibold text-gray-900">{courses[0].instructor}</h4>
                    <p className="text-sm text-blue-600 font-medium">Course Instructor</p>
                  </div>
                </div>
                
                <p className="text-sm text-gray-600 mb-4">
                  Expert instructor with years of industry experience teaching students around the world.
                </p>
                
                <div className="flex items-center justify-between text-sm text-gray-500 mb-4">
                  <div className="flex items-center">
                    <Star className="h-4 w-4 text-amber-500 mr-1" />
                    <span>4.9 Instructor Rating</span>
                  </div>
                  <div className="flex items-center">
                    <Users className="h-4 w-4 text-blue-500 mr-1" />
                    <span>2.4k Students</span>
                  </div>
                </div>
                
                <Button variant="outline" size="sm" className="w-full border-blue-200 text-blue-600 hover:bg-blue-50">
                  <ExternalLink className="mr-2 h-4 w-4" /> View Full Profile
                </Button>
              </CardContent>
            </Card>

            {/* Resources Card */}
            <Card className="border-0 shadow-lg overflow-hidden">
              <CardHeader className="pb-2 pt-5">
                <CardTitle className="text-lg font-medium flex items-center">
                  <FileText className="h-5 w-5 mr-2 text-blue-600" />
                  Course Resources
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-4">
                <ul className="space-y-3">
                  <li>
                    <Button 
                      variant="outline" 
                      className="w-full justify-start text-sm h-auto py-3.5 px-4 shadow-sm border-blue-100 hover:border-blue-200 hover:bg-blue-50/50 group transition-all" 
                      asChild
                    >
                      <Link href="#">
                        <div className="p-2 rounded-full bg-blue-100 group-hover:bg-blue-200 transition-colors mr-3">
                          <Download className="h-4 w-4 text-blue-600" />
                        </div>
                        <div className="flex flex-col items-start">
                          <span className="font-medium text-gray-900">Course Materials</span>
                          <span className="text-xs text-gray-500">PDF, 2.4 MB</span>
                        </div>
                      </Link>
                    </Button>
                  </li>
                  <li>
                    <Button 
                      variant="outline" 
                      className="w-full justify-start text-sm h-auto py-3.5 px-4 shadow-sm border-blue-100 hover:border-blue-200 hover:bg-blue-50/50 group transition-all" 
                      asChild
                    >
                      <Link href="#">
                        <div className="p-2 rounded-full bg-indigo-100 group-hover:bg-indigo-200 transition-colors mr-3">
                          <FileText className="h-4 w-4 text-indigo-600" />
                        </div>
                        <div className="flex flex-col items-start">
                          <span className="font-medium text-gray-900">Course Syllabus</span>
                          <span className="text-xs text-gray-500">PDF, 800 KB</span>
                        </div>
                      </Link>
                    </Button>
                  </li>
                  <li>
                    <Button 
                      variant="outline" 
                      className="w-full justify-start text-sm h-auto py-3.5 px-4 shadow-sm border-blue-100 hover:border-blue-200 hover:bg-blue-50/50 group transition-all" 
                      asChild
                    >
                      <Link href="#">
                        <div className="p-2 rounded-full bg-green-100 group-hover:bg-green-200 transition-colors mr-3">
                          <MessageCircle className="h-4 w-4 text-green-600" />
                        </div>
                        <div className="flex flex-col items-start">
                          <span className="font-medium text-gray-900">Discussion Forum</span>
                          <span className="text-xs text-gray-500">24 active discussions</span>
                        </div>
                      </Link>
                    </Button>
                  </li>
                </ul>
              </CardContent>
            </Card>

            {/* Course Details Card */}
            <Card className="border-0 shadow-lg overflow-hidden">
              <CardHeader className="pb-2 pt-5">
                <CardTitle className="text-lg font-medium flex items-center">
                  <Target className="h-5 w-5 mr-2 text-blue-600" />
                  Course Details
                </CardTitle>
              </CardHeader>
              <CardContent className="pt-4">
                <div className="bg-slate-50 rounded-xl p-4 border border-slate-100 mb-4">
                  <dl className="space-y-3">
                    <div className="flex items-center justify-between">
                      <dt className="text-sm font-medium text-slate-600 flex items-center">
                        <Calendar className="h-4 w-4 mr-2 text-slate-500" /> Last Updated
                      </dt>
                      <dd className="text-sm font-bold bg-white py-1 px-2 rounded-md shadow-sm border border-slate-100">
                        {format(new Date(courses[0].updatedAt), 'MMM dd, yyyy')}
                      </dd>
                    </div>
                    <div className="flex items-center justify-between">
                      <dt className="text-sm font-medium text-slate-600 flex items-center">
                        <Clock className="h-4 w-4 mr-2 text-slate-500" /> Total Duration
                      </dt>
                      <dd className="text-sm font-bold bg-white py-1 px-2 rounded-md shadow-sm border border-slate-100">
                        {formatDuration(courses[0].duration)}
                      </dd>
                    </div>
                    <div className="flex items-center justify-between">
                      <dt className="text-sm font-medium text-slate-600 flex items-center">
                        <Layers className="h-4 w-4 mr-2 text-slate-500" /> Lessons
                      </dt>
                      <dd className="text-sm font-bold bg-white py-1 px-2 rounded-md shadow-sm border border-slate-100">
                        {(studentProgress[courses[0].id]?.totalLessons || 0)}
                      </dd>
                    </div>
                    <div className="flex items-center justify-between">
                      <dt className="text-sm font-medium text-slate-600 flex items-center">
                        <GraduationCap className="h-4 w-4 mr-2 text-slate-500" /> Languages
                      </dt>
                      <dd className="text-sm font-bold bg-white py-1 px-2 rounded-md shadow-sm border border-slate-100">
                        English
                      </dd>
                    </div>
                  </dl>
                </div>

                <div className="grid grid-cols-2 gap-3">
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="py-2 border-blue-200 hover:bg-blue-50 font-medium text-blue-700 shadow-sm"
                  >
                    <Bookmark className="mr-1.5 h-4 w-4" /> Bookmark
                  </Button>
                  <Button 
                    variant="outline" 
                    size="sm" 
                    className="py-2 border-blue-200 hover:bg-blue-50 font-medium text-blue-700 shadow-sm"
                  >
                    <Share className="mr-1.5 h-4 w-4" /> Share
                  </Button>
                </div>
                
                <div className="mt-4 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-xl p-4 border border-blue-100 flex items-center justify-between">
                  <div>
                    <p className="text-sm font-medium text-blue-800">Need Help?</p>
                    <p className="text-xs text-blue-600">Contact course support</p>
                  </div>
                  <Button className="bg-white hover:bg-slate-50 text-blue-600 border border-blue-200 shadow-sm">
                    <MessageCircle className="h-4 w-4 mr-1" /> Chat
                  </Button>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}