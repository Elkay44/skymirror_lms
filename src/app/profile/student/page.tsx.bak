"use client";

import { useState, useEffect } from 'react';
import { useSession } from 'next-auth/react';
import { toast } from 'react-hot-toast';
import { 
  UserCircle, 
  BookOpen, 
  Award, 
  Target, 
  Save,
  Mail,
  Briefcase,
  Lightbulb,
  Edit
} from 'lucide-react';

import ProfileLayout from '@/components/profile/ProfileLayout';

interface StudentProfile {
  id: string;
  userId: string;
  interests: string;
  goals: string;
  preferredLearningStyle: string;
}

interface UserData {
  id: string;
  name: string;
  email: string;
  image: string | null;
  role: string;
  points: number;
  level: number;
  bio: string | null;
  location: string | null;
  studentProfile: StudentProfile | null;
}

export default function StudentProfilePage() {
  const { data: session } = useSession();
  const [userData, setUserData] = useState<UserData | null>(null);
  const [loading, setLoading] = useState(true);
  const [isEditing, setIsEditing] = useState(false);
  
  // Form state
  const [name, setName] = useState('');
  const [bio, setBio] = useState('');
  const [location, setLocation] = useState('');
  const [interests, setInterests] = useState('');
  const [goals, setGoals] = useState('');
  const [learningStyle, setLearningStyle] = useState('');
  
  useEffect(() => {
    const fetchUserData = async () => {
      // Don't try to fetch if no session exists
      if (!session?.user) {
        setLoading(false);
        return;
      }
      
      try {
        console.log('Fetching student profile data for:', session.user.email);
        const response = await fetch('/api/profile/student');
        
        if (!response.ok) {
          const errorText = await response.text();
          console.error('API error response:', errorText);
          throw new Error(`Failed to fetch profile: ${response.status} ${response.statusText}`);
        }
        
        const data = await response.json();
        console.log('Student profile data received:', data);
        setUserData(data);
        
        // Initialize form values with fallbacks
        setName(data.name || '');
        setBio(data.bio || '');
        setLocation(data.location || '');
        setInterests(data.studentProfile?.interests || '');
        setGoals(data.studentProfile?.goals || '');
        setLearningStyle(data.studentProfile?.preferredLearningStyle || '');
      } catch (error) {
        console.error('Error fetching student profile:', error);
        toast.error('Failed to load profile data. Please try again later.');
      } finally {
        setLoading(false);
      }
    };

    fetchUserData();
  }, [session]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    try {
      const response = await fetch('/api/profile/student', {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name,
          bio,
          location,
          studentProfile: {
            interests,
            goals,
            preferredLearningStyle: learningStyle,
          },
        }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to update profile');
      }
      
      const updatedData = await response.json();
      setUserData(updatedData);
      setIsEditing(false);
      toast.success('Profile updated successfully!');
    } catch (error) {
      console.error('Error updating profile:', error);
      toast.error('Failed to update profile');
    }
  };

  // Helper function to format learning style for display
  function formatLearningStyle(style: string): string {
    const styles: Record<string, string> = {
      visual: 'Visual (learn by seeing)',
      auditory: 'Auditory (learn by hearing)',
      reading: 'Reading/Writing (learn by reading and taking notes)',
      kinesthetic: 'Kinesthetic (learn by doing)',
      mixed: 'Mixed (combination of styles)'
    };
    
    return styles[style] || style;
  }

  if (loading) {
    return (
      <div className="p-8 flex justify-center items-center">
        <div className="animate-spin h-8 w-8 border-4 border-blue-600 rounded-full border-t-transparent"></div>
      </div>
    );
  }

  if (!userData) {
    return (
      <div className="p-8">
        <div className="bg-red-50 p-4 rounded-lg border border-red-200">
          <h2 className="text-red-800 font-medium">Profile Not Found</h2>
          <p className="text-red-600 mt-1">Unable to load your profile information. Please try again later.</p>
        </div>
      </div>
    );
  }
  
  return (
    <ProfileLayout
      userRole="STUDENT"
      userName={userData.name}
      userEmail={userData.email}
      userImage={userData.image}
      joinDate={userData.id ? new Date(parseInt(userData.id.substring(0, 8), 16) * 1000).toISOString() : new Date().toISOString()}
    >
      {isEditing ? (
        <div className="p-6">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl font-bold text-gray-900">Edit Profile</h2>
            <button
              type="button"
              onClick={() => setIsEditing(false)}
              className="text-blue-600 hover:text-blue-800"
            >
              Cancel
            </button>
          </div>
          
          <form onSubmit={handleSubmit}>
            <div className="space-y-6">
              <div>
                <label htmlFor="name" className="block text-sm font-medium text-gray-700">
                  Full Name
                </label>
                <input
                  type="text"
                  id="name"
                  value={name}
                  onChange={(e) => setName(e.target.value)}
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  required
                />
              </div>
              
              <div>
                <label htmlFor="bio" className="block text-sm font-medium text-gray-700">
                  Bio
                </label>
                <textarea
                  id="bio"
                  value={bio}
                  onChange={(e) => setBio(e.target.value)}
                  rows={3}
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                />
              </div>
              
              <div>
                <label htmlFor="location" className="block text-sm font-medium text-gray-700">
                  Location
                </label>
                <input
                  type="text"
                  id="location"
                  value={location}
                  onChange={(e) => setLocation(e.target.value)}
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                />
              </div>
              
              <div>
                <label htmlFor="interests" className="block text-sm font-medium text-gray-700">
                  Learning Interests
                </label>
                <textarea
                  id="interests"
                  value={interests}
                  onChange={(e) => setInterests(e.target.value)}
                  rows={3}
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="e.g. Web Development, AI, Data Science"
                />
              </div>
              
              <div>
                <label htmlFor="goals" className="block text-sm font-medium text-gray-700">
                  Learning Goals
                </label>
                <textarea
                  id="goals"
                  value={goals}
                  onChange={(e) => setGoals(e.target.value)}
                  rows={3}
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                  placeholder="e.g. Land a job as a developer within 6 months"
                />
              </div>
              
              <div>
                <label htmlFor="learningStyle" className="block text-sm font-medium text-gray-700">
                  Preferred Learning Style
                </label>
                <select
                  id="learningStyle"
                  value={learningStyle}
                  onChange={(e) => setLearningStyle(e.target.value)}
                  className="mt-1 block w-full border border-gray-300 rounded-md shadow-sm py-2 px-3 focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm"
                >
                  <option value="">Select a learning style</option>
                  <option value="visual">Visual (learn by seeing)</option>
                  <option value="auditory">Auditory (learn by hearing)</option>
                  <option value="reading">Reading/Writing (learn by reading and taking notes)</option>
                  <option value="kinesthetic">Kinesthetic (learn by doing)</option>
                  <option value="mixed">Mixed (combination of styles)</option>
                </select>
              </div>
              
              <div className="flex justify-end">
                <button
                  type="submit"
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                >
                  <Save className="h-4 w-4 mr-2" />
                  Save Changes
                </button>
              </div>
            </div>
          </form>
        </div>
      ) : (
        <div>
          {/* Profile Header with Edit Button */}
          <div className="p-6 border-b flex justify-between items-center">
            <h2 className="text-2xl font-bold text-gray-900">Student Profile</h2>
            <button
              type="button"
              onClick={() => setIsEditing(true)}
              className="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              <Edit className="h-4 w-4 mr-2" />
              Edit Profile
            </button>
          </div>
          
          {/* About Me Section */}
          <div className="p-6 border-b">
            <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
              <UserCircle className="w-5 h-5 mr-2 text-blue-600" />
              About Me
            </h2>
            <div className="flex flex-col md:flex-row gap-4">
              <div className="flex-1">
                <p className="text-gray-600">
                  {userData.bio || "No bio information provided yet."}
                </p>
              </div>
              {userData.location && (
                <div className="md:w-1/3 bg-gray-50 p-4 rounded-lg">
                  <h3 className="text-sm font-medium text-gray-500 mb-1">Location</h3>
                  <p className="text-gray-900">{userData.location}</p>
                </div>
              )}
            </div>
          </div>
          
          {/* Learning Preferences */}
          <div className="p-6 border-b">
            <h2 className="text-xl font-semibold text-gray-800 mb-4">Learning Preferences</h2>
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div className="bg-blue-50 p-4 rounded-lg border border-blue-100">
                <h3 className="font-medium text-blue-800 mb-2 flex items-center">
                  <Lightbulb className="w-4 h-4 mr-2" />
                  Interests
                </h3>
                <p className="text-blue-700 text-sm">
                  {userData.studentProfile?.interests || "No interests specified yet."}
                </p>
              </div>
              
              <div className="bg-indigo-50 p-4 rounded-lg border border-indigo-100">
                <h3 className="font-medium text-indigo-800 mb-2 flex items-center">
                  <Target className="w-4 h-4 mr-2" />
                  Learning Goals
                </h3>
                <p className="text-indigo-700 text-sm">
                  {userData.studentProfile?.goals || "No learning goals specified yet."}
                </p>
              </div>
              
              <div className="bg-purple-50 p-4 rounded-lg border border-purple-100">
                <h3 className="font-medium text-purple-800 mb-2 flex items-center">
                  <BookOpen className="w-4 h-4 mr-2" />
                  Learning Style
                </h3>
                <p className="text-purple-700 text-sm">
                  {userData.studentProfile?.preferredLearningStyle 
                    ? formatLearningStyle(userData.studentProfile.preferredLearningStyle)
                    : "No learning style specified yet."}
                </p>
              </div>
            </div>
          </div>
          
          {/* Achievement Summary */}
          <div className="p-6">
            <h2 className="text-xl font-semibold text-gray-800 mb-4 flex items-center">
              <Award className="w-5 h-5 mr-2 text-blue-600" />
              Achievement Summary
            </h2>
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-lg border border-blue-100">
              <p className="text-blue-800 mb-2">
                You're making great progress on your learning journey!
              </p>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
                <div className="bg-white px-4 py-3 rounded-lg shadow-sm">
                  <div className="text-2xl font-bold text-blue-600">{userData.level}</div>
                  <div className="text-xs text-gray-500">Current Level</div>
                </div>
                <div className="bg-white px-4 py-3 rounded-lg shadow-sm">
                  <div className="text-2xl font-bold text-indigo-600">{userData.points}</div>
                  <div className="text-xs text-gray-500">XP Points</div>
                </div>
                <div className="bg-white px-4 py-3 rounded-lg shadow-sm">
                  <div className="text-2xl font-bold text-purple-600">0</div>
                  <div className="text-xs text-gray-500">Certificates</div>
                </div>
                <div className="bg-white px-4 py-3 rounded-lg shadow-sm">
                  <div className="text-2xl font-bold text-green-600">0</div>
                  <div className="text-xs text-gray-500">Completed Courses</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}
    </ProfileLayout>
  );
}
