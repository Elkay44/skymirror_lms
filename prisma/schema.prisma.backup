datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String   @id @default(cuid())
  name            String?
  email           String   @unique
  password        String
  role            String   @default("STUDENT")
  points          Int      @default(0)
  level           Int      @default(1)
  needsOnboarding Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  sessions        Session[]
  studentProfile  StudentProfile?
  mentorProfile   MentorProfile?
  
  @@map("users")
}

model StudentProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  learningGoals String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model MentorProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Module {
  id          String   @id @default(cuid())
  title       String
  description String?
  courseId    String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  quizzes     Quiz[]   @relation("QuizToModule")
  moduleProgresses ModuleProgress[] @relation("ModuleToModuleProgresses")
  lessons     Lesson[] @relation("ModuleToLessons")
  resources   Resource[] @relation("ModuleToResources")
  activities  Activity[] @relation("ModuleToActivities")
  assignments Assignment[] @relation("AssignmentToModule")
  milestones  Milestone[] @relation("ModuleToMilestones")
  progress    ModuleProgress[] @relation("ModuleProgressToModule")
  moduleResources Resource? @relation("ResourceToModule")
  moduleAssignments Assignment? @relation("AssignmentToModuleInverseAssignment")
  activitiesInverse Activity[] @relation("ModuleToActivitiesInverse")
  milestonesInverse Milestone[] @relation("MilestoneToModule")
  moduleProgress ModuleProgress? @relation("ModuleToModuleProgress")
  moduleLessons Lesson[] @relation("ModuleToModuleLessons")
  quiz         Quiz?    @relation("QuizToModuleInverse")
  question     Question? @relation("QuestionToModule")
  @@index([courseId])
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  moduleId    String
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation("AssignmentToModule", fields: [moduleId], references: [id], onDelete: Cascade)
  rubricItems RubricItem[]
  submissions AssignmentSubmission[] @relation("SubmissionToAssignment")
  userId      String
  user        User     @relation("AssignmentToUser", fields: [userId], references: [id], onDelete: Cascade)
  assignmentSubmissions AssignmentSubmission[] @relation("AssignmentToSubmissions", fields: [id], references: [id])
}

model AssignmentSubmission {
  id           String     @id @default(cuid())
  content      String?
  fileUrl      String?
  status       String     @default("DRAFT")
  grade        Float?
  feedback     String?
  submittedAt  DateTime?
  gradedAt     DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assignmentId String
  userId       String
  assignment   Assignment @relation("SubmissionToAssignment", fields: [assignmentId], references: [id], onDelete: Cascade)
  user         User       @relation("SubmissionToUser", fields: [userId], references: [id], onDelete: Cascade)
  assignmentSubmission Assignment? @relation("SubmissionToAssignmentInverse", fields: [id], references: [id])
}

model RubricItem {
  id          String    @id @default(cuid())
  assignmentId String
  title        String
  description  String?
  points       Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
}

model InstructorProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("InstructorProfileToUser", fields: [userId], references: [id], onDelete: Cascade)
  courses     Course[] @relation("CourseToInstructor")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  instructorId Int
  isPublished Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  instructor  User     @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  modules     Module[] @relation("CourseToModules", fields: [id], references: [id])
  enrollments Enrollment[]
  mentorships Mentorship[] @relation("CourseToMentorships")
  quizzes     Quiz[]   @relation("QuizToModule")
  courseModules Module[] @relation("CourseToModulesInverse", fields: [id], references: [id])
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  courseId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  moduleId         String
  Module            Module          @relation(fields: [moduleId], references: [id])
}

model CourseSection {
  id        String   @id @default(cuid())
  title     String
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lessons   Lesson[]
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  moduleId    String   @unique
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation("LessonToModule", fields: [moduleId], references: [id], onDelete: Cascade)
  resources   Resource[] @relation("LessonToResources", references: [id])
  activities  Activity[] @relation("LessonToActivities")
  assignments Assignment[] @relation("LessonToAssignments", references: [id])
  moduleLessons Module? @relation("LessonToModuleInverse", fields: [id], references: [id])
  lessonResources Resource? @relation("ResourceToLesson", fields: [id], references: [id])
  lessonActivities Activity? @relation("ActivityToLesson", fields: [id], references: [id])
  lessonAssignments Assignment? @relation("AssignmentToLesson", fields: [id], references: [id])
  activitiesInverse Activity[] @relation("LessonToActivitiesInverse")

  @@index([moduleId])
}

model Page {
  id          String   @id @default(cuid())
  title       String
  content     String
  lessonId    String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  blocks      PageContentBlock[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model PageContentBlock {
  id          String   @id @default(cuid())
  type        String   @default("TEXT")
  content     String
  pageId      String
  page        Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model LessonProgress {
  id          String   @id @default(cuid())
  lessonId    String
  userId      String
  completed   Boolean  @default(false)
  completedAt DateTime?
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Question {
  id          String              @id @default(cuid())
  text        String
  quizId      String
  order       Int                 @default(0)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  quiz        Quiz                @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     UserAnswer[]        @relation("QuestionToAnswers")
  questionAnswers UserAnswer[]     @relation("QuestionToQuestionAnswers")
  userAnswer  UserAnswer?         @relation("QuestionToUserAnswer", fields: [id], references: [id])
  questionOptions QuestionOption[] @relation("QuestionToOptions", fields: [id], references: [id])
  options     QuestionOption[]     @relation("QuestionToOptionsInverse", fields: [id], references: [id])
}

model QuestionOption {
  id        String   @id @default(cuid())
  text      String
  isCorrect Boolean  @default(false)
  question  Question @relation("QuestionToOptions", fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  userAnswers UserAnswer[] @relation("QuestionOptionToUserAnswerInverse", references: [id])
  answers    UserAnswer[] @relation("QuestionOptionToUserAnswer", fields: [id], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model QuestionOptionUserAnswer {
  id               String   @id @default(cuid())
  questionOptionId String
  userAnswerId     String
  questionOption   QuestionOption @relation(fields: [questionOptionId], references: [id])
  userAnswer       UserAnswer     @relation(fields: [userAnswerId], references: [id])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   @default("DOCUMENT")
  url         String
  moduleId    String
  lessonId    String?
  milestoneId String?
  Milestone      Milestone?  @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  lesson      Lesson?    @relation("ResourceToLessonInverse", fields: [lessonId], references: [id], onDelete: Cascade)
  module      Module?    @relation("ResourceToModule", fields: [moduleId], references: [id], onDelete: Cascade)
  modules     Module[] @relation("ModuleToResources", references: [id])
  lessons     Lesson[] @relation("LessonToResources", references: [id])
  lessonResource Lesson? @relation("ResourceToLesson", fields: [id], references: [id])
  moduleResource Module? @relation("ResourceToModuleInverse", fields: [id], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Activity {
  id          String   @id @default(cuid())
  title       String
  description String?
  type        String   @default("EXERCISE")
  moduleId    String
  lessonId    String?
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation("ActivityToModule", fields: [moduleId], references: [id], onDelete: Cascade)
  lesson      Lesson?  @relation("ActivityToLesson", fields: [lessonId], references: [id], onDelete: Cascade)
  moduleActivities Module? @relation("ActivityToModuleInverse", fields: [id], references: [id])
  lessonActivities Lesson? @relation("ActivityToLessonInverse", fields: [id], references: [id])
  modules     Module[] @relation("ModuleToActivitiesInverse", references: [id])
  lessons     Lesson[] @relation("LessonToActivitiesInverse", references: [id])
}

model Milestone {
  id          String   @id @default(cuid())
  careerPathId String
  title       String
  description String?
  moduleId    String
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation("MilestoneToModule", fields: [moduleId], references: [id], onDelete: Cascade)
  progress    MilestoneProgress[] @relation("MilestoneToMilestoneProgress")
  resources   Resource[] @relation("MilestoneToResources", fields: [id], references: [id])
  activities  Activity[] @relation("MilestoneToActivities")
  assignments Assignment[] @relation("MilestoneToAssignments", fields: [id], references: [id])
  moduleMilestones Module? @relation("MilestoneToModuleInverse", fields: [id], references: [id])
  milestoneResources Resource? @relation("ResourceToMilestone", fields: [id], references: [id])
  milestoneActivities Activity? @relation("ActivityToMilestone", fields: [id], references: [id])
  milestoneAssignments Assignment? @relation("AssignmentToMilestone", fields: [id], references: [id])
  progressInverse MilestoneProgress[] @relation("MilestoneToMilestoneProgressInverse")
}

model CareerPath {
  id             String              @id @default(cuid())
  name           String
  description    String?
  estimatedTime  String?
  creatorId      String
  isPublic       Boolean             @default(false)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  creator        MentorProfile       @relation("CareerPathCreator", fields: [creatorId], references: [id])
  milestones     Milestone[]
  students       StudentProfile[]
  relatedCourses Course[]            @relation("CareerPathToCourse")
  coursesInverse Course[] @relation("CourseToCareerPath")
  prerequisites String
  mentors        MentorProfile[]     @relation("CareerPathMentors")
}

model Review {
  id        String   @id @default(cuid())
  mentorId  String
  studentId String
  rating    Float
  feedback  String?
  mentor    MentorProfile @relation(fields: [mentorId], references: [id])
  student   StudentProfile @relation(fields: [studentId], references: [id])
}

model StudentProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  learningGoals String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  mentorships Mentorship[] @relation("StudentMentorships")
  checkIns    CheckIn[] @relation("StudentProfileToCheckIn")
}

model MentorProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  bio             String?
  expertise       String
  availability    String
  rating          Float    @default(0)
  reviews         Review[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  careerPaths     CareerPath[]
  mentorships     Mentorship[] @relation("MentorMentorships")
  mentorshipsInverse Mentorship[] @relation("MentorMentorshipsInverse")
  mentorshipsAsStudent Mentorship[] @relation("StudentMentorships")
  studentCheckIns CheckIn[] @relation("StudentProfileToCheckIn", fields: [id], references: [id])
}

model CheckIn {
  id        String   @id @default(cuid())
  studentId String
  status    String   @default("PENDING")
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  student   StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentProfile StudentProfile @relation("StudentProfileToCheckIn")
}

model ModuleProgress {
  id          String   @id @default(cuid())
  userId      String
  moduleId    String
  progress    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserToModuleProgress", fields: [userId], references: [id], onDelete: Cascade)
  module      Module   @relation("ModuleToModuleProgress", fields: [moduleId], references: [id], onDelete: Cascade)
  moduleProgresses ModuleProgress[] @relation("ModuleToModuleProgresses")
}

model MilestoneProgress {
  id          String   @id @default(cuid())
  userId      String
  milestoneId String
  progress    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation("UserToMilestoneProgress", fields: [userId], references: [id], onDelete: Cascade)
  milestone   Milestone @relation("MilestoneToMilestoneProgress", fields: [milestoneId], references: [id], onDelete: Cascade)
}

model Mentorship {
  id              String   @id @default(cuid())
  mentorId        String
  studentId       String
  courseId        String
  status          String   @default("PENDING")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  mentor          User     @relation("MentorMentorships", fields: [mentorId], references: [id], onDelete: Cascade)
  student         User     @relation("StudentMentorships", fields: [studentId], references: [id], onDelete: Cascade)
  course          Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  mentorProfile   MentorProfile?  @relation(fields: [mentorId], references: [userId])
  studentProfile  StudentProfile? @relation(fields: [studentId], references: [userId])
  mentorshipsInverse Mentorship[] @relation("MentorMentorshipsInverse", fields: [id], references: [id])
  mentorshipsInverseStudent Mentorship[] @relation("StudentMentorshipsInverse", fields: [id], references: [id])
  mentorshipsInverseStudentInverse Mentorship[] @relation("StudentMentorshipsInverseStudent", fields: [id], references: [id])
  mentorshipsInverseStudentInverseStudent Mentorship[] @relation("StudentMentorshipsInverseStudentInverse", fields: [id], references: [id])
  mentorshipsAsMentor Mentorship[] @relation("MentorMentorshipsInverse")
  mentorshipsAsStudent Mentorship[] @relation("StudentMentorships")
}

model Quiz {
  id          String        @id @default(cuid())
  title       String
  description String?
  moduleId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  module      Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions   Question[]    @relation("QuizToQuestions", fields: [id], references: [id])
  quizQuestions Question[]  @relation("QuizToQuizQuestions", fields: [id], references: [id])
  attempts    QuizAttempt[] @relation("QuizToAttempts", fields: [id], references: [id])
  quizAttempts QuizAttempt[] @relation("QuizToAttemptsInverse", fields: [id], references: [id])
  quizQuestion Question? @relation("QuizToQuestionsInverse", fields: [id], references: [id])
  moduleInverse Module? @relation("QuizToModuleInverse", fields: [id], references: [id])
}

model QuizAttempt {
  id          String        @id @default(cuid())
  quizId      String
  userId      String
  score       Float?
  completed   Boolean        @default(false)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  quiz        Quiz            @relation(fields: [quizId], references: [id])
  user        User            @relation(fields: [userId], references: [id])
  answers     UserAnswer[]    @relation("AttemptToAnswers", fields: [id], references: [id])
  attemptAnswers UserAnswer[] @relation("AttemptToAttemptAnswers", fields: [id], references: [id])
  userAnswer  UserAnswer?     @relation("AttemptToUserAnswer", fields: [id], references: [id])
}

model UserAnswer {
  id               String   @id @default(cuid())
  questionId       String
  attemptId        String?
  content          String?
  isCorrect        Boolean
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  question         Question @relation("QuestionToAnswers", fields: [questionId], references: [id])
  quizAttempt      QuizAttempt? @relation("UserAnswerToQuizAttempt", fields: [attemptId], references: [id])
}
