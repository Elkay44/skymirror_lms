// This is a simplified Prisma schema for development purposes
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication and profile
model User {
  id                Int           @id @default(autoincrement())
  name              String?
  email             String        @unique
  hashedPassword    String?
  emailVerified     DateTime?
  image             String?
  role              String        @default("STUDENT") // STUDENT, INSTRUCTOR, MENTOR
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  points            Int           @default(0)
  level             Int           @default(1)
  bio               String?
  location          String?
  // Instructor-specific fields
  expertise         String?       // For instructors
  yearsOfExperience Int?          // For instructors
  education         String?       // For instructors
  teachingPhilosophy String?      // For instructors
  // Blockchain wallet address for NFT certificates
  walletAddress     String?       // Ethereum address for blockchain certificates
  enrollments       Enrollment[]
  progress        Progress[]
  createdCourses  Course[]      @relation("CourseInstructor")
  
  // Mentorship relations
  mentorProfile   MentorProfile?
  studentProfile  StudentProfile?
  sentMessages    Message[]     @relation("MessageSender")
  readMessages    Message[]     @relation("MessageReadBy")
  conversations   ConversationParticipant[]
  
  // New additions for requested features
  notifications   Notification[]  @relation("UserNotifications")
  quizAttempts    QuizAttempt[]  @relation("UserQuizAttempts")
  forumPosts      ForumPost[]    @relation("PostAuthor")
  forumComments   ForumComment[] @relation("CommentAuthor")
  learningMetrics LearningMetric[] @relation("UserLearningMetrics")
  userStats       UserStats?
  achievements    UserAchievement[] @relation("UserAchievements")
  
  // Blockchain certification system relations
  projectSubmissions ProjectSubmission[] @relation("StudentSubmissions")
  reviewedSubmissions ProjectSubmission[] @relation("InstructorReviews")
  certifications    Certification[]    @relation("StudentCertifications")
  // Submission responses
  submissionResponses SubmissionResponse[] @relation("StudentResponses")
  // Showcase projects
  showcaseProjects ShowcaseProject[] @relation("StudentShowcaseProjects")
}

// Course model
model Course {
  id                Int           @id @default(autoincrement())
  title             String
  shortDescription  String?       @default("")
  description       String?       @default("")
  imageUrl          String?       @default("/images/course-placeholder.jpg")
  difficulty        String        @default("BEGINNER") // BEGINNER, INTERMEDIATE, ADVANCED
  isPublished       Boolean       @default(false)
  isPrivate         Boolean       @default(false)
  price             Float         @default(0)
  discountedPrice   Float?        
  language          String?       @default("English")
  requirements      String?       // JSON array of requirements
  learningOutcomes  String?       // JSON array of learning outcomes
  targetAudience    String?       // JSON array of target audience
  hasCertification  Boolean       @default(false)
  certificationRequirements String?   // JSON string of requirements
  status            String        @default("DRAFT") // DRAFT, PUBLISHED, ARCHIVED
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  
  // Relations
  instructor        User          @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  instructorId      String
  modules           Module[]
  sections          CourseSection[] @relation("CourseSections")
  enrollments       Enrollment[]
  tags              String?       // Comma-separated tags
  careerPaths       CareerPath[]  // Associated career paths
  showcaseProjects  ShowcaseProject[] @relation("CourseShowcaseProjects")
  projects          Project[]     @relation("CourseProjects")
  certifications    Certification[] @relation("CourseCertifications")
  
  // Course content
  quizzes           Quiz[]             @relation("CourseQuizzes")
  forums            Forum[]           @relation("CourseForums")
  analytics         CourseAnalytic[]  @relation("CourseAnalytics")
  conversations     Conversation[]    // Course-related conversations
  
  // Indexes
  @@index([instructorId])
  @@index([isPublished, status])
}

// Course section model for organizing course content
model CourseSection {
  id          String    @id @default(cuid())
  title       String
  description String?   @default("")
  order       Int       @default(0)
  course      Course    @relation("CourseSections", fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  lessons     Lesson[]  @relation("SectionLessons")
  
  @@index([courseId, order])
}

// Module model (sections within a course)
model Module {
  resources   Resource[]
  id          String      @id @default(cuid())
  title       String
  description String?
  position    Int         // Order in the course
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  // Project relation
  projects    Project[]
  lessons     Lesson[]
  quizzes     Quiz[]      @relation("ModuleQuizzes")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Lesson model (content within modules)
model Lesson {
  id          String      @id @default(cuid())
  title       String
  description String?     @default("")
  content     String?     @default("") // Can store HTML or markdown content
  videoUrl    String?     // URL to video content if any
  duration    Int?        // Duration in minutes
  position    Int         // Order in the module
  
  // Module relationship (legacy)
  module      Module?     @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String?
  
  // Section relationship (new)
  section     CourseSection? @relation("SectionLessons", fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId   String?
  
  // Other relationships
  resources   Resource[]  @relation("LessonResources")
  progress    Progress[]
  quiz        Quiz?      @relation("LessonToQuiz", fields: [quizId], references: [id])
  quizId      String?    @unique
  
  // Timestamps
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@index([moduleId, position])
  @@index([sectionId, position])
}

// Enrollment model (tracks user enrollment in courses)
model Enrollment {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  status    String    @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  enrolledAt DateTime  @default(now())
  completedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@unique([userId, courseId]) // A user can only enroll once in a course
}

// Progress model (tracks lesson completion)
model Progress {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  completed Boolean   @default(false)
  completedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@unique([userId, lessonId]) // Track unique progress per lesson per user
}

// Mentor profile for mentorship platform
model MentorProfile {
  id               String       @id @default(cuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String       @unique
  bio              String?
  specialties      String?      // Comma-separated list of specialty areas
  experience       String?      // Years of experience
  availability     String?      // JSON string with availability schedule
  hourlyRate       Int?         // Rate in cents
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  mentorships      Mentorship[] @relation("MentorRelation")
  careerPaths      CareerPath[]
  reviews          MentorReview[]
}

// Student profile with additional mentorship-related data
model StudentProfile {
  id               String       @id @default(cuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String       @unique
  interests        String?      // Comma-separated list of interests
  goals            String?      // Career and learning goals
  preferredLearningStyle String? // Visual, auditory, reading/writing, kinesthetic
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  mentorships      Mentorship[] @relation("StudentRelation")
  milestoneProgress MilestoneProgress[]
  activeCareerPath CareerPath?  @relation(fields: [careerPathId], references: [id])
  careerPathId     String?
}

// Mentorship relationship between mentor and student
model Mentorship {
  id               String       @id @default(cuid())
  mentor           MentorProfile @relation("MentorRelation", fields: [mentorId], references: [id])
  mentorId         String
  student          StudentProfile @relation("StudentRelation", fields: [studentId], references: [id])
  studentId        String
  status           String       @default("PENDING") // PENDING, ACTIVE, COMPLETED, CANCELLED
  focusArea        String?      // Main focus of the mentorship
  startDate        DateTime?
  endDate          DateTime?
  checkIns         CheckIn[]
  conversations    Conversation[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@unique([mentorId, studentId]) // Unique mentorship relationship
}

// Conversation model for messaging
model Conversation {
  id               String       @id @default(cuid())
  // Optional mentorship relation - only for mentor-student conversations
  mentorship       Mentorship?  @relation(fields: [mentorshipId], references: [id], onDelete: SetNull)
  mentorshipId     String?
  // General conversation properties
  name             String?      // For group chats
  topic            String?
  isGroupChat      Boolean      @default(false)
  // Course-related conversations
  course           Course?      @relation(fields: [courseId], references: [id], onDelete: SetNull)
  courseId         String?
  // Activity tracking
  lastActivity     DateTime     @default(now())
  createdAt        DateTime     @default(now())
  
  // Relationships
  messages         Message[]
  participants     ConversationParticipant[]
  lastMessage      String?      // Cached content of last message
  lastMessageAt    DateTime?    // Timestamp of last message
  lastMessageSenderId String?    // ID of last message sender
}

// Conversation participants - allows many-to-many relationship
model ConversationParticipant {
  id              Int          @id @default(autoincrement())
  conversation    Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId  String
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  joinedAt        DateTime     @default(now())
  role            String       @default("MEMBER") // MEMBER, ADMIN
  unreadCount     Int          @default(0)
  
  @@unique([conversationId, userId])
}

// Message model
model Message {
  id               String       @id @default(cuid())
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId   String
  sender           User         @relation("MessageSender", fields: [senderId], references: [id])
  senderId         String
  // No longer need receiver for group chats
  // Generalized message properties
  content          String
  readBy           User[]       @relation("MessageReadBy")
  isRead           Boolean      @default(false)
  // System messages
  isSystem         Boolean      @default(false) // True for system-generated messages
  systemType       String?      // JOIN_CONVERSATION, LEAVE_CONVERSATION, etc.
  // Attachments and timestamps
  attachments      Attachment[]
  sentAt           DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  // Soft delete
  isDeleted        Boolean      @default(false) // For soft delete functionality
}

// Attachment model for messages
model Attachment {
  id               String       @id @default(cuid())
  message          Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId        String
  fileName         String
  fileUrl          String
  fileType         String       // image, video, document, etc.
  mimeType         String       // Specific MIME type for better handling
  fileSize         Int
  thumbnailUrl     String?      // For images and videos
  uploadedAt       DateTime     @default(now())
  // For pending uploads
  uploadStatus     String       @default("COMPLETE") // PENDING, COMPLETE, FAILED
}

// Regular check-ins between mentor and student
model CheckIn {
  id               String       @id @default(cuid())
  mentorship       Mentorship   @relation(fields: [mentorshipId], references: [id], onDelete: Cascade)
  mentorshipId     String
  scheduledFor     DateTime
  completedAt      DateTime?
  summary          String?
  nextSteps        String?
  progress         String?      // STUCK, SLOW, STEADY, FAST, BREAKTHROUGH
  mood             String?      // FRUSTRATED, CONFUSED, NEUTRAL, MOTIVATED, EXCITED
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

// Career path model
model CareerPath {
  id               String       @id @default(cuid())
  name             String
  description      String?
  estimatedTime    String?      // e.g. "6 months"
  creator          MentorProfile @relation(fields: [creatorId], references: [id])
  creatorId        String
  isPublic         Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  milestones       Milestone[]
  students         StudentProfile[]
  relatedCourses   Course[]
}

// Milestone model for career paths
model Milestone {
  id               String       @id @default(cuid())
  careerPath       CareerPath   @relation(fields: [careerPathId], references: [id], onDelete: Cascade)
  careerPathId     String
  title            String
  description      String?
  position         Int          // Order in the career path
  estimatedHours   Int?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  resources        Resource[]
  progress         MilestoneProgress[]
}

// Resources for milestones
model Resource {
  id          String    @id @default(cuid())
  title       String
  description String?
  url         String
  type        String    @default("ARTICLE") // ARTICLE, VIDEO, COURSE, BOOK, TOOL, EXERCISE, OTHER
  
  // Module relationship (legacy)
  module      Module?   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String?
  
  // Lesson relationship
  lesson      Lesson?   @relation("LessonResources", fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String?
  
  // Milestone relationship
  milestone   Milestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  milestoneId String?
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Track student progress on milestones
model MilestoneProgress {
  id               String       @id @default(cuid())
  student          StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId        String
  milestone        Milestone    @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  milestoneId      String
  completed        Boolean      @default(false)
  completedAt      DateTime?
  notes            String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@unique([studentId, milestoneId])
}

// Reviews for mentors
model MentorReview {
  id               String       @id @default(cuid())
  mentor           MentorProfile @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  mentorId         String
  studentId        String
  rating           Int          // 1-5
  comment          String?
  createdAt        DateTime     @default(now())
  
  @@unique([mentorId, studentId])
}

// ======= NEW MODELS FOR REQUESTED FEATURES =======

// 1. INTERACTIVE ASSESSMENTS

model Quiz {
  id               String       @id @default(cuid())
  title            String
  description      String?
  timeLimit        Int?         // Time limit in minutes, null means no limit
  passingScore     Int          @default(70) // Percentage needed to pass
  attemptsAllowed  Int          @default(3)  // Number of attempts allowed
  isPublished      Boolean      @default(false)
  // Relations
  course           Course       @relation("CourseQuizzes", fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  module           Module?      @relation("ModuleQuizzes", fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId         String?
  lesson           Lesson?     @relation("LessonToQuiz")
  questions        Question[]
  attempts         QuizAttempt[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Question {
  id               String       @id @default(cuid())
  quiz             Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId           String
  questionText     String
  questionType     String       @default("MULTIPLE_CHOICE") // MULTIPLE_CHOICE, TRUE_FALSE, FILL_BLANK, SHORT_ANSWER, MATCHING
  points           Int          @default(1)
  position         Int          // Order in the quiz
  options          QuestionOption[] @relation("QuestionOptions")
  correctAnswers   QuestionOption[] @relation("CorrectAnswers")
  explanation      String?      // Explanation of the correct answer
  userAnswers      UserAnswer[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model QuestionOption {
  id               String       @id @default(cuid())
  question         Question     @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  optionText       String
  position         Int          // Order of this option
  isCorrectFor     Question[]   @relation("CorrectAnswers")
  userAnswers      UserAnswer[]
  createdAt        DateTime     @default(now())
}

model QuizAttempt {
  id               String       @id @default(cuid())
  user             User         @relation("UserQuizAttempts", fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  quiz             Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId           String
  score            Int?         // Percentage score
  isPassed         Boolean      @default(false)
  startedAt        DateTime     @default(now())
  completedAt      DateTime?
  userAnswers      UserAnswer[]
  feedbackGiven    String?      // Instructor feedback
}

model UserAnswer {
  id               String       @id @default(cuid())
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  // For multiple choice and true/false
  selectedOptions  QuestionOption[]
  // For fill-in-the-blank or short answer
  textAnswer       String?
  isCorrect        Boolean      @default(false)
  pointsEarned     Int          @default(0)
  submittedAt      DateTime     @default(now())
}

// 2. DISCUSSION FORUMS

model Forum {
  id               String       @id @default(cuid())
  title            String
  description      String?
  course           Course       @relation("CourseForums", fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  isGlobal         Boolean      @default(false) // If true, this is a global forum not tied to a specific course
  isActive         Boolean      @default(true)
  posts            ForumPost[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model ForumPost {
  id               String       @id @default(cuid())
  forum            Forum        @relation(fields: [forumId], references: [id], onDelete: Cascade)
  forumId          String
  author           User         @relation("PostAuthor", fields: [authorId], references: [id])
  authorId         String
  title            String
  content          String
  isPinned         Boolean      @default(false)
  isLocked         Boolean      @default(false) // If true, no more comments can be added
  viewCount        Int          @default(0)
  comments         ForumComment[]
  likes            Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model ForumComment {
  id               String       @id @default(cuid())
  post             ForumPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId           String
  author           User         @relation("CommentAuthor", fields: [authorId], references: [id])
  authorId         String
  content          String
  parentCommentId  String?      // For nested comments/replies
  likes            Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

// 3. NOTIFICATIONS SYSTEM

model Notification {
  id               String       @id @default(cuid())
  user             User         @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  title            String
  message          String
  type             String       // COURSE_UPDATE, FORUM_REPLY, ACHIEVEMENT, QUIZ_REMINDER, SYSTEM, etc.
  isRead           Boolean      @default(false)
  linkUrl          String?      // URL to navigate to when notification is clicked
  relatedId        String?      // ID of the related item (course, forum post, etc.)
  relatedType      String?      // Type of the related item (COURSE, FORUM_POST, SHOWCASE_PROJECT, etc.)
  createdAt        DateTime     @default(now())
}

// 4. LEARNING ANALYTICS

model LearningMetric {
  id               String       @id @default(cuid())
  user             User         @relation("UserLearningMetrics", fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  metricType       String       // ENGAGEMENT, COMPLETION_RATE, QUIZ_PERFORMANCE, TIME_SPENT, LEARNING_PATTERN
  metricData       String       // JSON data for the metric
  timestamp        DateTime     @default(now())
}

model CourseAnalytic {
  id               String       @id @default(cuid())
  course           Course       @relation("CourseAnalytics", fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  analyticType     String       // ENROLLMENT_RATE, COMPLETION_RATE, AVERAGE_SCORE, ENGAGEMENT_LEVEL
  analyticData     String       // JSON data for the analytic
  timestamp        DateTime     @default(now())
}

// 5. ACHIEVEMENTS AND PROGRESSION SYSTEM

model UserStats {
  id                    String       @id @default(cuid())
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId                String       @unique
  level                 Int          @default(1)
  currentXP             Int          @default(0)
  nextLevelXP           Int          @default(100)
  totalScholarshipAmount Int         @default(0)
  activeDiscounts       Int          @default(0)
  completedCourses      Int          @default(0)
  forumContributions    Int          @default(0)
  mentorshipHours       Int          @default(0)
  lastUpdated           DateTime     @default(now())
}

model Achievement {
  id                    Int              @id @default(autoincrement())
  type                  String           // skill, scholarship, mentor, job, etc.
  title                 String
  description           String
  icon                  String?
  category              String           // learning, financial, community, career
  // Financial achievement fields
  amount                Int?             // For scholarships/financial achievements
  currency              String?          // USD, EUR, etc.
  validUntil            DateTime?        // Expiration date if applicable
  discountPercent       Int?             // For discount achievements
  applicableCourses     String?          // JSON array of course IDs
  referralCount         Int?             // For referral achievements
  // Community achievement fields
  studentsHelped        Int?             // For mentorship achievements
  averageRating         Float?           // Average rating as a mentor
  helpfulAnswers        Int?             // Number of answers marked as helpful
  // Career achievement fields
  issuer                String?          // Organization that issued the achievement
  company               String?          // For job placement achievements
  position              String?          // Job position
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  // Relations
  userAchievements      UserAchievement[]
}

model UserAchievement {
  id                    String       @id @default(cuid())
  user                  User         @relation("UserAchievements", fields: [userId], references: [id], onDelete: Cascade)
  userId                String
  achievement           Achievement  @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  achievementId         String
  earnedAt              DateTime     @default(now())
  
  @@unique([userId, achievementId]) // A user can only earn each achievement once
}

// ==== BLOCKCHAIN CERTIFICATION SYSTEM ====

// ShowcaseProject model for featuring student projects
model ShowcaseProject {
  id               String       @id @default(cuid())
  title            String
  description      String?
  imageUrl         String?
  repositoryUrl    String?
  demoUrl          String?
  // Relations
  student          User         @relation("StudentShowcaseProjects", fields: [studentId], references: [id], onDelete: Cascade)
  studentId        String
  course           Course       @relation("CourseShowcaseProjects", fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  submission       ProjectSubmission? @relation("SubmissionShowcaseProjects", fields: [submissionId], references: [id])
  submissionId     String?
  // Showcase metadata
  featured         Boolean      @default(false)
  category         String?      // Frontend, Backend, Mobile, etc.
  tags             String?      // Comma-separated tags
  showcasedAt      DateTime     @default(now())
  viewCount        Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

// Project model to track project submissions and completions
model Project {
  id               String       @id @default(cuid())
  title            String
  description      String?
  instructions     String?
  dueDate          DateTime?
  pointsValue      Int          @default(10)
  isPublished      Boolean      @default(false)
  // Relations to course structure
  course           Course       @relation("CourseProjects", fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  module           Module?      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId         String?
  // Relations to submissions
  submissions      ProjectSubmission[]
  // Required for certification
  isRequiredForCertification Boolean @default(true)
  // Timestamps
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

// Student project submissions
model ProjectSubmission {
  id               String       @id @default(cuid())
  project          Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String
  student          User         @relation("StudentSubmissions", fields: [studentId], references: [id], onDelete: Cascade)
  studentId        String
  // Submission content
  submissionUrl    String?      // GitHub URL, file upload URL, etc.
  submissionText   String?      // For text-based submissions
  submissionFiles  String?      // JSON array of file URLs
  // Review status
  status           String       @default("SUBMITTED") // SUBMITTED, REVIEWING, APPROVED, REJECTED, REVISION_REQUESTED
  grade            Int?         // Optional numeric grade
  feedback         String?      // Instructor feedback
  // Instructor who reviewed
  reviewer         User?        @relation("InstructorReviews", fields: [reviewerId], references: [id], onDelete: SetNull)
  reviewerId       String?
  // Revisions tracking
  revisionCount    Int          @default(0)
  // Timestamps
  submittedAt      DateTime     @default(now())
  reviewedAt       DateTime?
  updatedAt        DateTime     @updatedAt
  
  // Certification relation
  certifications   Certification[]
  // Student response to feedback
  response         SubmissionResponse?
  
  // Showcase projects
  showcaseProjects ShowcaseProject[] @relation("SubmissionShowcaseProjects")
  
  @@unique([projectId, studentId]) // One submission per project per student
}

// Blockchain certification model
model Certification {
  id               String       @id @default(cuid())
  // Certificate details
  title            String
  description      String?
  certificateType  String       @default("COURSE_COMPLETION") // COURSE_COMPLETION, SPECIALIZATION, DEGREE, etc.
  // Blockchain details
  tokenId          String?      // NFT token ID on the blockchain
  contractAddress  String?      // Address of the blockchain contract
  txHash           String?      // Transaction hash from blockchain
  ipfsMetadataUrl  String?      // IPFS URL for certificate metadata
  isRevoked        Boolean      @default(false)
  // Relations
  student          User         @relation("StudentCertifications", fields: [studentId], references: [id], onDelete: Cascade)
  studentId        String
  course           Course       @relation("CourseCertifications", fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  // Project submissions that contributed to this certification
  submissions      ProjectSubmission[]
  // Timestamps
  issuedAt         DateTime     @default(now())
  expiresAt        DateTime?    // Optional expiration date
  revokedAt        DateTime?
  // Blockchain verification details
  verificationUrl  String?      // URL to verify certificate
  verificationCode String?      // Code to verify certificate
}

// Student responses to instructor feedback on project submissions
model SubmissionResponse {
  id               String       @id @default(cuid())
  // Relation to the submission
  submission      ProjectSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId    String       @unique // Each submission can have one response thread
  // Student who responded
  student         User         @relation("StudentResponses", fields: [studentId], references: [id], onDelete: Cascade)
  studentId       String
  // Content of the response
  content         String
  // Whether the instructor has read this response
  isRead          Boolean      @default(false)
  // Timestamps
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

