// This is a simplified Prisma schema for development purposes
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User model for authentication and profile
model User {
  id              String        @id @default(cuid())
  name            String?
  email           String        @unique
  hashedPassword  String?
  emailVerified   DateTime?
  image           String?
  role            String        @default("STUDENT") // STUDENT, INSTRUCTOR, ADMIN
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  points          Int           @default(0)
  level           Int           @default(1)
  bio             String?
  location        String?
  enrollments     Enrollment[]
  progress        Progress[]
  createdCourses  Course[]      @relation("CourseInstructor")
  
  // Mentorship relations
  mentorProfile   MentorProfile?
  studentProfile  StudentProfile?
  sentMessages    Message[]     @relation("MessageSender")
  receivedMessages Message[]    @relation("MessageReceiver")
  readMessages    Message[]     @relation("MessageReadBy")
  
  // New additions for requested features
  notifications   Notification[]  @relation("UserNotifications")
  quizAttempts    QuizAttempt[]  @relation("UserQuizAttempts")
  forumPosts      ForumPost[]    @relation("PostAuthor")
  forumComments   ForumComment[] @relation("CommentAuthor")
  learningMetrics LearningMetric[] @relation("UserLearningMetrics")
}

// Course model
model Course {
  id            String        @id @default(cuid())
  title         String
  description   String?
  imageUrl      String?
  difficulty    String        @default("BEGINNER") // BEGINNER, INTERMEDIATE, ADVANCED
  isPublished   Boolean       @default(false)
  price         Int?          @default(0) // Price in cents, 0 = free
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  instructor    User          @relation("CourseInstructor", fields: [instructorId], references: [id])
  instructorId  String
  modules       Module[]
  enrollments   Enrollment[]
  tags          String?       // Comma-separated tags
  careerPaths   CareerPath[]  // Associated career paths
  
  // New additions for requested features
  quizzes       Quiz[]        @relation("CourseQuizzes")
  forums        Forum[]       @relation("CourseForums")
  analytics     CourseAnalytic[] @relation("CourseAnalytics")
}

// Module model (sections within a course)
model Module {
  id          String      @id @default(cuid())
  title       String
  description String?
  position    Int         // Order in the course
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  lessons     Lesson[]
  quizzes     Quiz[]      @relation("ModuleQuizzes")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Lesson model (content within modules)
model Lesson {
  id          String      @id @default(cuid())
  title       String
  description String?
  content     String?     // Can store HTML or markdown content
  videoUrl    String?     // URL to video content if any
  duration    Int?        // Duration in minutes
  position    Int         // Order in the module
  module      Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId    String
  progress    Progress[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

// Enrollment model (tracks user enrollment in courses)
model Enrollment {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  status    String    @default("ACTIVE") // ACTIVE, COMPLETED, CANCELLED
  enrolledAt DateTime  @default(now())
  completedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@unique([userId, courseId]) // A user can only enroll once in a course
}

// Progress model (tracks lesson completion)
model Progress {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  completed Boolean   @default(false)
  completedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@unique([userId, lessonId]) // Track unique progress per lesson per user
}

// Mentor profile for mentorship platform
model MentorProfile {
  id               String       @id @default(cuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String       @unique
  bio              String?
  specialties      String?      // Comma-separated list of specialty areas
  experience       String?      // Years of experience
  availability     String?      // JSON string with availability schedule
  hourlyRate       Int?         // Rate in cents
  isActive         Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  mentorships      Mentorship[] @relation("MentorRelation")
  careerPaths      CareerPath[]
  reviews          MentorReview[]
}

// Student profile with additional mentorship-related data
model StudentProfile {
  id               String       @id @default(cuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String       @unique
  interests        String?      // Comma-separated list of interests
  goals            String?      // Career and learning goals
  preferredLearningStyle String? // Visual, auditory, reading/writing, kinesthetic
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  mentorships      Mentorship[] @relation("StudentRelation")
  milestoneProgress MilestoneProgress[]
  activeCareerPath CareerPath?  @relation(fields: [careerPathId], references: [id])
  careerPathId     String?
}

// Mentorship relationship between mentor and student
model Mentorship {
  id               String       @id @default(cuid())
  mentor           MentorProfile @relation("MentorRelation", fields: [mentorId], references: [id])
  mentorId         String
  student          StudentProfile @relation("StudentRelation", fields: [studentId], references: [id])
  studentId        String
  status           String       @default("PENDING") // PENDING, ACTIVE, COMPLETED, CANCELLED
  focusArea        String?      // Main focus of the mentorship
  startDate        DateTime?
  endDate          DateTime?
  checkIns         CheckIn[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@unique([mentorId, studentId]) // Unique mentorship relationship
}

// Conversation model for messaging
model Conversation {
  id               String       @id @default(cuid())
  mentorship       Mentorship   @relation(fields: [mentorshipId], references: [id], onDelete: Cascade)
  mentorshipId     String
  topic            String?
  lastActivity     DateTime     @default(now())
  createdAt        DateTime     @default(now())
  
  // Relationships
  messages         Message[]
}

// Message model
model Message {
  id               String       @id @default(cuid())
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId   String
  sender           User         @relation("MessageSender", fields: [senderId], references: [id])
  senderId         String
  receiver         User         @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId       String
  content          String
  readBy           User[]       @relation("MessageReadBy")
  isRead           Boolean      @default(false)
  attachments      Attachment[]
  sentAt           DateTime     @default(now())
}

// Attachment model for messages
model Attachment {
  id               String       @id @default(cuid())
  message          Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId        String
  fileName         String
  fileUrl          String
  fileType         String
  fileSize         Int
  uploadedAt       DateTime     @default(now())
}

// Regular check-ins between mentor and student
model CheckIn {
  id               String       @id @default(cuid())
  mentorship       Mentorship   @relation(fields: [mentorshipId], references: [id], onDelete: Cascade)
  mentorshipId     String
  scheduledFor     DateTime
  completedAt      DateTime?
  summary          String?
  nextSteps        String?
  progress         String?      // STUCK, SLOW, STEADY, FAST, BREAKTHROUGH
  mood             String?      // FRUSTRATED, CONFUSED, NEUTRAL, MOTIVATED, EXCITED
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

// Career path model
model CareerPath {
  id               String       @id @default(cuid())
  name             String
  description      String?
  estimatedTime    String?      // e.g. "6 months"
  creator          MentorProfile @relation(fields: [creatorId], references: [id])
  creatorId        String
  isPublic         Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  milestones       Milestone[]
  students         StudentProfile[]
  relatedCourses   Course[]
}

// Milestone model for career paths
model Milestone {
  id               String       @id @default(cuid())
  careerPath       CareerPath   @relation(fields: [careerPathId], references: [id], onDelete: Cascade)
  careerPathId     String
  title            String
  description      String?
  position         Int          // Order in the career path
  estimatedHours   Int?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  resources        Resource[]
  progress         MilestoneProgress[]
}

// Resources for milestones
model Resource {
  id               String       @id @default(cuid())
  milestone        Milestone    @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  milestoneId      String
  title            String
  description      String?
  url              String?
  type             String       @default("ARTICLE") // ARTICLE, VIDEO, COURSE, BOOK, TOOL, EXERCISE, OTHER
  createdAt        DateTime     @default(now())
}

// Track student progress on milestones
model MilestoneProgress {
  id               String       @id @default(cuid())
  student          StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId        String
  milestone        Milestone    @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  milestoneId      String
  completed        Boolean      @default(false)
  completedAt      DateTime?
  notes            String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@unique([studentId, milestoneId])
}

// Reviews for mentors
model MentorReview {
  id               String       @id @default(cuid())
  mentor           MentorProfile @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  mentorId         String
  studentId        String
  rating           Int          // 1-5
  comment          String?
  createdAt        DateTime     @default(now())
  
  @@unique([mentorId, studentId])
}

// ======= NEW MODELS FOR REQUESTED FEATURES =======

// 1. INTERACTIVE ASSESSMENTS

model Quiz {
  id               String       @id @default(cuid())
  title            String
  description      String?
  timeLimit        Int?         // Time limit in minutes, null means no limit
  passingScore     Int          @default(70) // Percentage needed to pass
  attemptsAllowed  Int          @default(3)  // Number of attempts allowed
  isPublished      Boolean      @default(false)
  // Relations
  course           Course       @relation("CourseQuizzes", fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  module           Module?      @relation("ModuleQuizzes", fields: [moduleId], references: [id])
  moduleId         String?
  questions        Question[]
  attempts         QuizAttempt[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model Question {
  id               String       @id @default(cuid())
  quiz             Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId           String
  questionText     String
  questionType     String       @default("MULTIPLE_CHOICE") // MULTIPLE_CHOICE, TRUE_FALSE, FILL_BLANK, SHORT_ANSWER, MATCHING
  points           Int          @default(1)
  position         Int          // Order in the quiz
  options          QuestionOption[] @relation("QuestionOptions")
  correctAnswers   QuestionOption[] @relation("CorrectAnswers")
  explanation      String?      // Explanation of the correct answer
  userAnswers      UserAnswer[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model QuestionOption {
  id               String       @id @default(cuid())
  question         Question     @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  optionText       String
  position         Int          // Order of this option
  isCorrectFor     Question[]   @relation("CorrectAnswers")
  userAnswers      UserAnswer[]
  createdAt        DateTime     @default(now())
}

model QuizAttempt {
  id               String       @id @default(cuid())
  user             User         @relation("UserQuizAttempts", fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  quiz             Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId           String
  score            Int?         // Percentage score
  isPassed         Boolean      @default(false)
  startedAt        DateTime     @default(now())
  completedAt      DateTime?
  userAnswers      UserAnswer[]
  feedbackGiven    String?      // Instructor feedback
}

model UserAnswer {
  id               String       @id @default(cuid())
  attempt          QuizAttempt  @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  attemptId        String
  question         Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  // For multiple choice and true/false
  selectedOptions  QuestionOption[]
  // For fill-in-the-blank or short answer
  textAnswer       String?
  isCorrect        Boolean      @default(false)
  pointsEarned     Int          @default(0)
  submittedAt      DateTime     @default(now())
}

// 2. DISCUSSION FORUMS

model Forum {
  id               String       @id @default(cuid())
  title            String
  description      String?
  course           Course       @relation("CourseForums", fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  isGlobal         Boolean      @default(false) // If true, this is a global forum not tied to a specific course
  isActive         Boolean      @default(true)
  posts            ForumPost[]
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model ForumPost {
  id               String       @id @default(cuid())
  forum            Forum        @relation(fields: [forumId], references: [id], onDelete: Cascade)
  forumId          String
  author           User         @relation("PostAuthor", fields: [authorId], references: [id])
  authorId         String
  title            String
  content          String
  isPinned         Boolean      @default(false)
  isLocked         Boolean      @default(false) // If true, no more comments can be added
  viewCount        Int          @default(0)
  comments         ForumComment[]
  likes            Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

model ForumComment {
  id               String       @id @default(cuid())
  post             ForumPost    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId           String
  author           User         @relation("CommentAuthor", fields: [authorId], references: [id])
  authorId         String
  content          String
  parentCommentId  String?      // For nested comments/replies
  likes            Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

// 3. NOTIFICATIONS SYSTEM

model Notification {
  id               String       @id @default(cuid())
  user             User         @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  title            String
  message          String
  type             String       // COURSE_UPDATE, FORUM_REPLY, ACHIEVEMENT, QUIZ_REMINDER, SYSTEM, etc.
  isRead           Boolean      @default(false)
  linkUrl          String?      // URL to navigate to when notification is clicked
  createdAt        DateTime     @default(now())
}

// 4. LEARNING ANALYTICS

model LearningMetric {
  id               String       @id @default(cuid())
  user             User         @relation("UserLearningMetrics", fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  metricType       String       // ENGAGEMENT, COMPLETION_RATE, QUIZ_PERFORMANCE, TIME_SPENT, LEARNING_PATTERN
  metricData       String       // JSON data for the metric
  timestamp        DateTime     @default(now())
}

model CourseAnalytic {
  id               String       @id @default(cuid())
  course           Course       @relation("CourseAnalytics", fields: [courseId], references: [id], onDelete: Cascade)
  courseId         String
  analyticType     String       // ENROLLMENT_RATE, COMPLETION_RATE, AVERAGE_SCORE, ENGAGEMENT_LEVEL
  analyticData     String       // JSON data for the analytic
  timestamp        DateTime     @default(now())
}
