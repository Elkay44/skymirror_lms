// This is a simplified Prisma schema for development purposes
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Enums
enum EnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  FAILED
  DROPPED
}

// User model for authentication and profile
model User {
  id              String        @id @default(cuid())
  name            String?
  email           String        @unique
  hashedPassword  String?
  emailVerified   DateTime?
  image           String?
  role            String        @default("STUDENT") // STUDENT, INSTRUCTOR, ADMIN
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  points          Int           @default(0)
  level           Int           @default(1)
  bio             String?
  location        String?
  enrollments     Enrollment[]
  progress        Progress[]
  createdCourses  Course[]      @relation("CourseInstructor")
  lessonProgress  LessonProgress[]
  quizAttempts    QuizAttempt[]
  certificates    Certificate[]
  
  // Mentorship relations
  mentorProfile   MentorProfile?
  studentProfile  StudentProfile?
  sentMessages    Message[]     @relation("MessageSender")
  receivedMessages Message[]    @relation("MessageReceiver")
  readMessages    Message[]     @relation("MessageReadBy")
}

// Course model
model Course {
  id            String        @id @default(cuid())
  title         String
  description   String?
  imageUrl      String?
  difficulty    String        @default("BEGINNER") // BEGINNER, INTERMEDIATE, ADVANCED
  isPublished   Boolean       @default(false)
  price         Int?          @default(0) // Price in cents, 0 = free
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  instructor    User          @relation("CourseInstructor", fields: [instructorId], references: [id])
  instructorId  String
  modules       Module[]
  enrollments   Enrollment[]
  certificates  Certificate[]
  quizzes       Quiz[]
  lessons       Lesson[]
  tags          String?       // Comma-separated tags
  careerPaths   CareerPath[]  // Associated career paths
  
  @@map("courses")
}

// Module model (sections within a course)
model Module {
  id          String      @id @default(cuid())
  title       String
  description String?
  position    Int         // Order in the course
  course      Course      @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId    String
  lessons     Lesson[]
  quizzes     Quiz[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  @@map("modules")
}

// Lesson model (content within modules)
model Lesson {
  id            String      @id @default(cuid())
  title         String
  description   String?
  content       String?     // Can store HTML or markdown content
  videoUrl      String?     // URL to video content if any
  position      Int         // Order in the module
  duration      Int?        // Duration in minutes
  isPublished   Boolean     @default(false)
  module        Module      @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  resources     Resource[]  // Associated learning resources
  progress      LessonProgress[]
  order         Int         // Order within the module
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  @@map("lessons")
}

// Quiz model
model Quiz {
  id            String       @id @default(cuid())
  title         String
  description   String?
  questions     Json         // Array of questions
  passingScore  Float        @default(70.0)
  timeLimit     Int?         // Time limit in minutes
  maxAttempts   Int?         // Maximum number of attempts allowed
  module        Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId      String
  attempts      QuizAttempt[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  @@map("quizzes")
}

// Enrollment model
model Enrollment {
  id           String       @id @default(cuid())
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  course       Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  status       EnrollmentStatus @default(NOT_STARTED)
  progress     Float        @default(0.0)
  completedAt  DateTime?
  certificate  Certificate?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

// Lesson Progress model
model LessonProgress {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String
  isCompleted Boolean  @default(false)
  completedAt DateTime?
  score       Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([userId, lessonId])
  @@map("lesson_progress")
}

// Quiz Attempt model
model QuizAttempt {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  quizId      String
  score       Float
  passed      Boolean
  answers     Json     // User's answers
  startedAt   DateTime @default(now())
  completedAt DateTime?
  
  @@map("quiz_attempts")
}

// Certificate model
model Certificate {
  id           String     @id @default(cuid())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId     String
  enrollment   Enrollment @relation(fields: [enrollmentId], references: [id])
  enrollmentId String     @unique
  issuedAt     DateTime   @default(now())
  downloadUrl  String?
  
  @@map("certificates")
}

// Enrollment model (tracks user enrollment in courses)
model Enrollment {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  course    Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  status    EnrollmentStatus @default(NOT_STARTED)
  enrolledAt DateTime  @default(now())
  completedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@unique([userId, courseId]) // A user can only enroll once in a course
}

// Progress model (tracks lesson completion)
model Progress {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  lesson    Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String
  completed Boolean   @default(false)
  completedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  @@unique([userId, lessonId]) // Track unique progress per lesson per user
}

// =================== MENTORSHIP SYSTEM MODELS ===================

// Mentor profile for users who can mentor others
model MentorProfile {
  id               String       @id @default(cuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String       @unique
  bio              String?      // Detailed mentor bio
  specialties      String?      // Comma-separated specialties
  yearsExperience  Int          @default(0)
  availableHours   Int          @default(5) // Hours available per week
  rating           Float        @default(5.0)
  reviewCount      Int          @default(0)
  isAvailable      Boolean      @default(true)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  mentorships      Mentorship[] @relation("MentorRelation")
  careerPaths      CareerPath[]
  reviews          MentorReview[]
}

enum EnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DROPPED
}

// Student profile with additional mentorship-related data
model StudentProfile {
  id               String       @id @default(cuid())
  user             User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String       @unique
  careerGoals      String?      // Career objectives
  areasOfInterest  String?      // Comma-separated interests
  learningStyle    String?      // Preferred learning style
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  mentorships      Mentorship[] @relation("StudentRelation")
  milestoneProgress MilestoneProgress[]
  activeCareerPath CareerPath?  @relation(fields: [careerPathId], references: [id])
  careerPathId     String?
}

// Mentorship relationship between mentor and student
model Mentorship {
  id               String       @id @default(cuid())
  mentor           MentorProfile @relation("MentorRelation", fields: [mentorId], references: [id])
  mentorId         String
  student          StudentProfile @relation("StudentRelation", fields: [studentId], references: [id])
  studentId        String
  status           String        @default("PENDING") // PENDING, ACTIVE, PAUSED, COMPLETED, DECLINED
  startDate        DateTime?
  endDate          DateTime?
  notes            String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  conversations    Conversation[]
  checkIns         CheckIn[]
  
  @@unique([mentorId, studentId])
}

// Conversation model for messaging
model Conversation {
  id               String       @id @default(cuid())
  mentorship       Mentorship   @relation(fields: [mentorshipId], references: [id], onDelete: Cascade)
  mentorshipId     String
  topic            String?
  lastActivity     DateTime     @default(now())
  createdAt        DateTime     @default(now())
  
  // Relationships
  messages         Message[]
}

// Message model
model Message {
  id               String       @id @default(cuid())
  conversation     Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  conversationId   String
  sender           User         @relation("MessageSender", fields: [senderId], references: [id])
  senderId         String
  receiver         User         @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId       String
  content          String
  readBy           User[]       @relation("MessageReadBy")
  isRead           Boolean      @default(false)
  attachments      Attachment[]
  sentAt           DateTime     @default(now())
}

// Attachment model for messages
model Attachment {
  id               String       @id @default(cuid())
  message          Message      @relation(fields: [messageId], references: [id], onDelete: Cascade)
  messageId        String
  fileName         String
  fileUrl          String
  fileType         String
  fileSize         Int
  uploadedAt       DateTime     @default(now())
}

// Regular check-ins between mentor and student
model CheckIn {
  id               String       @id @default(cuid())
  mentorship       Mentorship   @relation(fields: [mentorshipId], references: [id], onDelete: Cascade)
  mentorshipId     String
  scheduledFor     DateTime
  completedAt      DateTime?
  summary          String?
  nextSteps        String?
  progress         String?      // STUCK, SLOW, STEADY, FAST, BREAKTHROUGH
  mood             String?      // FRUSTRATED, CONFUSED, NEUTRAL, MOTIVATED, EXCITED
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}

// Career path model
model CareerPath {
  id               String       @id @default(cuid())
  name             String
  description      String?
  estimatedTime    String?      // e.g. "6 months"
  creator          MentorProfile @relation(fields: [creatorId], references: [id])
  creatorId        String
  isPublic         Boolean      @default(false)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  milestones       Milestone[]
  students         StudentProfile[]
  relatedCourses   Course[]
}

// Milestone model for career paths
model Milestone {
  id               String       @id @default(cuid())
  careerPath       CareerPath   @relation(fields: [careerPathId], references: [id], onDelete: Cascade)
  careerPathId     String
  title            String
  description      String?
  position         Int          // Order in the career path
  estimatedHours   Int?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relationships
  resources        Resource[]
  progress         MilestoneProgress[]
}

// Resources for milestones
model Resource {
  id               String       @id @default(cuid())
  milestone        Milestone    @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  milestoneId      String
  title            String
  description      String?
  url              String?
  type             String       @default("ARTICLE") // ARTICLE, VIDEO, COURSE, BOOK, TOOL, EXERCISE, OTHER
  createdAt        DateTime     @default(now())
}

// Track student progress on milestones
model MilestoneProgress {
  id               String       @id @default(cuid())
  student          StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId        String
  milestone        Milestone    @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  milestoneId      String
  completed        Boolean      @default(false)
  completedAt      DateTime?
  notes            String?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  @@unique([studentId, milestoneId])
}

// Reviews for mentors
model MentorReview {
  id               String       @id @default(cuid())
  mentor           MentorProfile @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  mentorId         String
  studentId        String
  rating           Int          // 1-5
  comment          String?
  createdAt        DateTime     @default(now())
  
  @@unique([mentorId, studentId])
}
