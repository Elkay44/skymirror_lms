datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum EnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DROPPED
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Authenticator {
  credentialID         String  @id
  credentialPublicKey  String  @unique
  counter             Int
  credentialDeviceType String
  credentialBackedUp  Boolean
  transports          String?
  userId              String
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("authenticators")
}

model User {
  id                 String         @id @default(cuid())
  name               String?
  email              String?       @unique
  emailVerified      DateTime?
  image              String?
  password           String?       @db.Text
  role               String        @default("STUDENT")
  points             Int           @default(0)
  level              Int           @default(1)
  needsOnboarding    Boolean       @default(false)
  walletAddress      String?       @unique
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  
  // Relations
  accounts           Account[]
  sessions           Session[]
  studentProfile     StudentProfile?
  mentorProfile      MentorProfile?
  userAchievements   UserAchievement[]
  mentorSessions     MentorSession[] @relation("MentorSessions")
  menteeSessions     MentorSession[] @relation("MenteeSessions")
  authenticators     Authenticator[]
  likedProjects      ProjectLike[]
  projectSubmissions ProjectSubmission[] @relation("StudentSubmissions")
  assignmentSubmissions AssignmentSubmission[]
  showcaseProjects   ShowcaseProject[]
  enrollments        Enrollment[]
  instructorCourses  Course[]            @relation("InstructorCourses")
  lessonViews        LessonView[]
  certifications     Certification[]
  quizAttempts       QuizAttempt[]
  
  @@map("users")
}

model Course {
  id               String    @id @default(cuid())
  title            String
  description      String?
  slug             String    @unique
  image            String?
  isPublished      Boolean   @default(false)
  price            Float?    @default(0)
  discountPrice    Float?    @default(0)
  level            String?   // BEGINNER, INTERMEDIATE, ADVANCED
  category         String?
  language         String?   @default("en")
  totalHours       Float?    @default(0)
  totalLectures    Int?      @default(0)
  totalQuizzes     Int?      @default(0)
  totalProjects    Int?      @default(0)
  totalStudents    Int?      @default(0)
  averageRating    Float?    @default(0)
  totalReviews     Int?      @default(0)
  instructorId     String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  instructor       User              @relation("InstructorCourses", fields: [instructorId], references: [id], onDelete: Cascade)
  modules          Module[]
  projects         Project[]         @relation("CourseProjects")
  enrollments      Enrollment[]
  certifications   Certification[]
  
  @@map("courses")
}

model Page {
  id          String   @id @default(cuid())
  title       String
  content     String?
  description String?
  moduleId    String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  isPublished Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String

  @@index([moduleId])
  @@map("pages")
}

model Module {
  id               String    @id @default(cuid())
  title            String
  description      String?
  order            Int       @default(0)
  isPublished      Boolean   @default(false)
  courseId         String
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  
  // Relations
  course           Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lessons          Lesson[]
  projects         Project[]
  pages            Page[]
  quizzes          Quiz[]
  assignments      Assignment[]
  
  @@map("modules")
}

model Lesson {
  id               String       @id @default(cuid())
  title            String
  description      String?
  videoUrl         String?
  duration         Int?         // in minutes
  order            Int          @default(0)
  isPublished      Boolean      @default(false)
  isPreview        Boolean      @default(false)
  moduleId         String
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  // Relations
  module           Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  views            LessonView[]
  
  @@map("lessons")
}

model LessonView {
  id          String   @id @default(cuid())
  lessonId    String
  userId      String
  viewCount   Int      @default(1)
  lastViewed  DateTime @default(now())
  
  // Relations
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([lessonId, userId])
  @@map("lesson_views")
}

model Project {
  id               String            @id @default(cuid())
  title            String
  description      String?
  instructions     String?
  dueDate          DateTime?
  pointsValue      Int               @default(10)
  isPublished      Boolean           @default(false)
  courseId         String
  moduleId         String?
  isRequiredForCertification Boolean @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  module           Module?           @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  course           Course            @relation("CourseProjects", fields: [courseId], references: [id], onDelete: Cascade)
  submissions      ProjectSubmission[]
  likes            ProjectLike[]
}

model ProjectSubmission {
  id               String              @id @default(cuid())
  project          Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId        String
  student          User                @relation("StudentSubmissions", fields: [studentId], references: [id], onDelete: Cascade)
  studentId        String
  // Submission content
  submissionUrl    String?             // GitHub URL, file upload URL, etc.
  submissionText   String?             // Text submission
  submissionFiles  String?             // JSON string of file metadata
  // Submission status and feedback
  status           String              @default("SUBMITTED") // SUBMITTED, UNDER_REVIEW, APPROVED, REJECTED, REVISION_REQUESTED
  grade            Int?                // 0-100
  feedback         String?             // Instructor feedback
  reviewerId       String?             // ID of the user who reviewed this submission
  // Revisions tracking
  revisionCount    Int                 @default(0)
  // Timestamps
  submittedAt      DateTime            @default(now())
  reviewedAt       DateTime?
  updatedAt        DateTime            @updatedAt
  
  // Certification relation
  certification    Certification? @relation("CertificationToProjectSubmission")
  // Student response to feedback
  response         SubmissionResponse?
  
  // Showcase projects
  showcaseProjects ShowcaseProject[]   @relation("SubmissionShowcaseProjects")
  
  @@unique([projectId, studentId])
  @@map("project_submissions")
}

model SubmissionResponse {
  id                String           @id @default(cuid())
  submission        ProjectSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId      String           @unique
  responseText      String
  resubmissionUrl   String?
  resubmissionFiles String?          // JSON string of file metadata
  status            String           @default("PENDING") // PENDING, REVIEWED
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@map("submission_responses")
}

model ShowcaseProject {
  id                String           @id @default(cuid())
  title             String
  description       String
  featuredImage     String?
  demoUrl           String?
  sourceCodeUrl     String?
  tags              String?          // Comma-separated tags
  isPublished       Boolean          @default(false)
  submission        ProjectSubmission @relation("SubmissionShowcaseProjects", fields: [submissionId], references: [id], onDelete: Cascade)
  submissionId      String
  student           User             @relation(fields: [studentId], references: [id], onDelete: Cascade)
  studentId         String
  likes             Int              @default(0)
  views             Int              @default(0)
  featuredAt        DateTime?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  @@map("showcase_projects")
}

model ProjectLike {
  id        String   @id @default(cuid())
  userId    String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([userId, projectId])
  @@map("project_likes")
}

model Assignment {
  id          String     @id @default(cuid())
  title       String
  description String?
  content     String?    @db.Text
  dueDate     DateTime?
  points      Int        @default(100)
  isPublished Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  moduleId    String?
  module      Module?    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  rubric      Rubric?    @relation(fields: [rubricId], references: [id])
  rubricId    String?
  submissions AssignmentSubmission[]
  
  @@map("assignments")
}

model AssignmentSubmission {
  id           String     @id @default(cuid())
  content      String?    @db.Text
  fileUrl      String?
  grade        Float?
  feedback     String?    @db.Text
  status       String     @default("DRAFT") // DRAFT, SUBMITTED, GRADED, REJECTED
  submittedAt  DateTime?
  gradedAt     DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)
  studentId    String
  student      User       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  
  @@map("assignment_submissions")
}

model Rubric {
  id          String       @id @default(cuid())
  title       String
  description String?
  isDefault   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  items       RubricItem[]
  assignments Assignment[]
  
  @@map("rubrics")
}

model RubricItem {
  id          String    @id @default(cuid())
  rubricId    String
  title       String
  description String?
  points      Int
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relations
  rubric      Rubric    @relation(fields: [rubricId], references: [id], onDelete: Cascade)
  
  @@map("rubric_items")
}

model StudentProfile {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  bio                    String?
  learningGoals          String?
  interests              String?
  goals                  String?
  preferredLearningStyle String?
  user                   User     @relation(fields: [userId], references: [id])
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model MentorProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  bio           String?
  specialties   String?
  experience   String?
  availability String?
  isActive     Boolean  @default(true)
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Achievement {
  id              String              @id @default(cuid())
  type            String
  title           String
  description     String
  icon            String?
  category        String              // learning, financial, community, career
  amount          Float?
  currency        String?
  validUntil      DateTime?
  discountPercent Int?
  issuer          String?
  company         String?
  position        String?
  skillLevel      String?             // For learning achievements
  courseId        String?             // For course-specific achievements
  xpEarned        Int?                // XP awarded for this achievement
  isActive        Boolean    @default(true)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  userAchievements UserAchievement[]
  
  @@index([type])
  @@index([category])
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  metadata      Json?       @default("{}")  // For storing additional data like referral count, etc.
  
  // Relations
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  
  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@index([earnedAt])
}

model Enrollment {
  id                String           @id @default(cuid())
  userId            String
  courseId          String
  status            String           @default("ACTIVE") // ACTIVE, COMPLETED, DROPPED, SUSPENDED
  progress          Int              @default(0) // 0-100
  completedAt       DateTime?
  enrolledAt        DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  
  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  certification     Certification?   @relation(name: "EnrollmentCertification")
  certificationId   String?          @unique
  
  @@unique([userId, courseId])
  @@map("enrollments")
}

model Certification {
  id                String           @id @default(cuid())
  userId            String
  courseId          String
  enrollmentId      String           @unique
  projectSubmissionId String?        @unique
  issuedAt          DateTime         @default(now())
  expiresAt         DateTime?
  verificationUrl   String?
  credentialId      String?          // External credential ID if issued by a third party
  metadata          String?          // JSON string of additional data
  
  // Relations
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  course            Course           @relation(fields: [courseId], references: [id], onDelete: Cascade)
  enrollment        Enrollment       @relation("EnrollmentCertification", fields: [enrollmentId], references: [id])
  projectSubmission ProjectSubmission? @relation("CertificationToProjectSubmission", fields: [projectSubmissionId], references: [id], onDelete: Cascade)
  
  @@unique([userId, courseId])
  @@map("certifications")
}

model MentorSession {
  id          String   @id @default(cuid())
  mentorId    String
  menteeId    String
  title       String
  description String?
  status      String   @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED
  scheduledAt DateTime
  duration    Int      // Duration in minutes
  meetingUrl  String?
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  mentor      User     @relation("MentorSessions", fields: [mentorId], references: [id])
  mentee      User     @relation("MenteeSessions", fields: [menteeId], references: [id])
  
  @@index([mentorId])
  @@index([menteeId])
}

model Quiz {
  id             String       @id @default(cuid())
  title          String
  description    String?
  moduleId       String
  timeLimit      Int?         // Time limit in minutes
  passingScore   Int          @default(70) // 0-100
  attemptsAllowed Int?        @default(1)
  showCorrectAnswers Boolean   @default(true)
  isPublished    Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  module         Module       @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  questions      Question[]
  attempts       QuizAttempt[]
  
  @@map("quizzes")
}

model Question {
  id             String         @id @default(cuid())
  quizId         String
  text           String
  type           String         // MULTIPLE_CHOICE, TRUE_FALSE, SHORT_ANSWER, ESSAY
  order          Int            @default(0)
  points         Int            @default(1)
  explanation    String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  quiz           Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options        QuestionOption[]
  userAnswers    UserAnswer[]
  
  @@map("questions")
}

model QuestionOption {
  id             String         @id @default(cuid())
  questionId     String
  text           String
  isCorrect      Boolean        @default(false)
  order          Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  question       Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers    UserAnswer[]
  
  @@map("question_options")
}

model QuizAttempt {
  id             String         @id @default(cuid())
  quizId         String
  userId         String
  score          Float?
  completed      Boolean        @default(false)
  startedAt      DateTime       @default(now())
  submittedAt    DateTime?
  timeSpent      Int?           // Time spent in seconds
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  quiz           Quiz           @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers        UserAnswer[]
  
  @@map("quiz_attempts")
}

model UserAnswer {
  id               String         @id @default(cuid())
  attemptId        String
  questionId       String
  optionId         String?
  textAnswer       String?
  isCorrect        Boolean        @default(false)
  pointsAwarded    Float?         // Points awarded for this answer
  gradedAt         DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  
  // Relations
  attempt         QuizAttempt    @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  question        Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selectedOption  QuestionOption? @relation(fields: [optionId], references: [id], onDelete: Cascade)
  
  @@map("user_answers")
}
