datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expires   DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String   @id @default(cuid())
  name            String?
  email           String   @unique
  password        String
  role            String   @default("STUDENT")
  points          Int      @default(0)
  level           Int      @default(1)
  needsOnboarding Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  sessions        Session[]
  studentProfile  StudentProfile?
  mentorProfile   MentorProfile?
  userAchievements UserAchievement[]
}

model StudentProfile {
  id            String   @id @default(cuid())
  userId        String   @unique
  bio           String?
  learningGoals String
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model MentorProfile {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Achievement {
  id          String       @id @default(cuid())
  type        String
  title       String
  description String
  icon        String?
  category    String       // learning, financial, community, career
  amount      Float?
  currency    String?
  validUntil  DateTime?
  discountPercent Int?
  issuer      String?
  company     String?
  position    String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  userAchievements UserAchievement[]
}

model UserAchievement {
  id            String     @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime   @default(now())
  user          User       @relation(fields: [userId], references: [id])
  achievement   Achievement @relation(fields: [achievementId], references: [id])
  metadata      Json?      // For storing additional data like referral count, etc.
  
  @@unique([userId, achievementId])
}
