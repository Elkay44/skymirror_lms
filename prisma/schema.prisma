generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Assignment models
model Assignment {
  id                 String                 @id @default(uuid())
  title              String
  description        String?
  instructions       String?
  dueDate            DateTime?
  isPublished        Boolean                @default(false)
  maxScore           Int                    @default(100)
  submissionType     String                 @default("TEXT")
  allowLateSubmissions Boolean               @default(false)
  createdAt          DateTime               @default(now())
  updatedAt          DateTime               @updatedAt
  moduleId           String
  module             Module                 @relation(fields: [moduleId], references: [id])
  submissions        AssignmentSubmission[]
  resources          AssignmentResource[]
  rubricItems        RubricItem[]
}

model AssignmentSubmission {
  id          String    @id @default(uuid())
  content     String?
  fileUrl     String?
  status      String    @default("DRAFT") // DRAFT, SUBMITTED, GRADED
  grade       Float?
  feedback    String?
  submittedAt DateTime?
  gradedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignmentId String
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
  userId      Int
  user        User       @relation(fields: [userId], references: [id])
}

model AssignmentResource {
  id          String    @id @default(uuid())
  title       String
  url         String
  type        String    @default("LINK") // LINK, FILE, VIDEO
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  assignmentId String
  assignment  Assignment @relation(fields: [assignmentId], references: [id])
}

model RubricItem {
  id             String          @id @default(uuid())
  title          String
  description    String?
  points         Int
  order          Int             @default(0)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  assignmentId   String
  assignment     Assignment      @relation(fields: [assignmentId], references: [id])
  criteriaLevels CriteriaLevel[]
}

model CriteriaLevel {
  id           String     @id @default(uuid())
  level        String
  description  String
  points       Int
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  rubricItemId String
  rubricItem   RubricItem @relation(fields: [rubricItemId], references: [id])
}

model User {
  id                  Int                       @id @default(autoincrement())
  name                String?
  email               String                    @unique
  hashedPassword      String?
  emailVerified       DateTime?
  image               String?
  role                String                    @default("STUDENT")
  createdAt           DateTime                  @default(now())
  updatedAt           DateTime                  @updatedAt
  points              Int                       @default(0)
  level               Int                       @default(1)
  bio                 String?                   @default("")
  location            String?                   @default("")
  expertise           String?
  yearsOfExperience   Int?
  education           String?
  teachingPhilosophy  String?
  walletAddress       String?
  certifications      Certification[]           @relation("StudentCertifications")
  conversations       ConversationParticipant[]
  createdCourses      Course[]                  @relation("CourseInstructor")
  courseApprovals     CourseApprovalHistory[]   @relation("CourseReviewer")
  enrollments         Enrollment[]
  forumComments       ForumComment[]            @relation("CommentAuthor")
  forumPosts          ForumPost[]               @relation("PostAuthor")
  learningMetrics     LearningMetric[]          @relation("UserLearningMetrics")
  mentorProfile       MentorProfile?
  sentMessages        Message[]                 @relation("MessageSender")
  notifications       Notification[]            @relation("UserNotifications")
  progress            Progress[]
  reviewedSubmissions ProjectSubmission[]       @relation("InstructorReviews")
  projectSubmissions  ProjectSubmission[]       @relation("StudentSubmissions")
  quizAttempts        QuizAttempt[]             @relation("UserQuizAttempts")
  showcaseProjects    ShowcaseProject[]         @relation("StudentShowcaseProjects")
  assignmentSubmissions AssignmentSubmission[]
  studentProfile      StudentProfile?
  submissionResponses SubmissionResponse[]      @relation("StudentResponses")
  achievements        UserAchievement[]         @relation("UserAchievements")
  userStats           UserStats?
  readMessages        Message[]                 @relation("MessageReadBy")
}

model Course {
  id                        String                  @id @default(cuid())
  title                     String
  shortDescription          String?                 @default("")
  description               String?                 @default("")
  imageUrl                  String?                 @default("/images/course-placeholder.jpg")
  difficulty                String                  @default("BEGINNER")
  isPublished               Boolean                 @default(false)
  isPrivate                 Boolean                 @default(false)
  price                     Float                   @default(0)
  discountedPrice           Float?
  language                  String?                 @default("English")
  requirements              String?
  learningOutcomes          String?
  targetAudience            String?
  hasCertification          Boolean                 @default(false)
  certificationRequirements String?
  status                    String                  @default("DRAFT")
  createdAt                 DateTime                @default(now())
  updatedAt                 DateTime                @updatedAt
  instructorId              Int
  tags                      String?
  certifications            Certification[]         @relation("CourseCertifications")
  conversations             Conversation[]
  instructor                User                    @relation("CourseInstructor", fields: [instructorId], references: [id], onDelete: Cascade)
  analytics                 CourseAnalytic[]        @relation("CourseAnalytics")
  approvalHistory           CourseApprovalHistory[] @relation("CourseApprovalHistory")
  sections                  CourseSection[]         @relation("CourseSections")
  enrollments               Enrollment[]
  forums                    Forum[]                 @relation("CourseForums")
  modules                   Module[]
  projects                  Project[]               @relation("CourseProjects")
  quizzes                   Quiz[]                  @relation("CourseQuizzes")
  showcaseProjects          ShowcaseProject[]       @relation("CourseShowcaseProjects")
  careerPaths               CareerPath[]            @relation("CareerPathToCourse")

  @@index([instructorId])
  @@index([isPublished, status])
}

model CourseSection {
  id          String   @id @default(cuid())
  title       String
  description String?  @default("")
  order       Int      @default(0)
  courseId    String
  course      Course   @relation("CourseSections", fields: [courseId], references: [id], onDelete: Cascade)
  lessons     Lesson[] @relation("SectionLessons")

  @@index([courseId, order])
}

model Module {
  id          String     @id @default(cuid())
  title       String
  description String?
  order       Int
  courseId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  forums      Forum[]    @relation("ModuleForums")
  lessons     Lesson[]
  course      Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  projects    Project[]
  quizzes     Quiz[]     @relation("ModuleQuizzes")
  resources   Resource[]
  assignments Assignment[]

  @@unique([courseId, order])
}

model Lesson {
  id          String         @id @default(cuid())
  title       String
  description String?        @default("")
  content     String?        @default("")
  videoUrl    String?
  duration    Int?
  order       Int
  moduleId    String?
  sectionId   String?
  quizId      String?        @unique
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  quiz        Quiz?          @relation("LessonToQuiz", fields: [quizId], references: [id])
  section     CourseSection? @relation("SectionLessons", fields: [sectionId], references: [id], onDelete: Cascade)
  module      Module?        @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  progress    Progress[]
  resources   Resource[]     @relation("LessonResources")

  @@index([moduleId, order])
  @@index([sectionId, order])
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      Int
  courseId    String
  status      String    @default("ACTIVE")
  enrolledAt  DateTime  @default(now())
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Progress {
  id          String    @id @default(cuid())
  userId      Int
  lessonId    String
  completed   Boolean   @default(false)
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lesson      Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model MentorProfile {
  id           String         @id @default(cuid())
  userId       Int            @unique
  bio          String?
  specialties  String?
  experience   String?
  availability String?
  hourlyRate   Int?
  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  careerPaths  CareerPath[]
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviews      MentorReview[]
  mentorships  Mentorship[]   @relation("MentorRelation")
}

model StudentProfile {
  id                     String              @id @default(cuid())
  userId                 Int                 @unique
  interests              String?
  goals                  String?
  preferredLearningStyle String?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  careerPathId           String?
  mentorships            Mentorship[]        @relation("StudentRelation")
  milestoneProgress      MilestoneProgress[]
  activeCareerPath       CareerPath?         @relation(fields: [careerPathId], references: [id])
  user                   User                @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Mentorship {
  id            String         @id @default(cuid())
  mentorId      String
  studentId     String
  status        String         @default("PENDING")
  focusArea     String?
  startDate     DateTime?
  endDate       DateTime?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  checkIns      CheckIn[]
  conversations Conversation[]
  student       StudentProfile @relation("StudentRelation", fields: [studentId], references: [id])
  mentor        MentorProfile  @relation("MentorRelation", fields: [mentorId], references: [id])

  @@unique([mentorId, studentId])
}

model Conversation {
  id                  String                    @id @default(cuid())
  mentorshipId        String?
  name                String?
  topic               String?
  isGroupChat         Boolean                   @default(false)
  courseId            String?
  lastActivity        DateTime                  @default(now())
  createdAt           DateTime                  @default(now())
  lastMessage         String?
  lastMessageAt       DateTime?
  lastMessageSenderId String?
  course              Course?                   @relation(fields: [courseId], references: [id])
  mentorship          Mentorship?               @relation(fields: [mentorshipId], references: [id])
  participants        ConversationParticipant[]
  messages            Message[]
}

model ConversationParticipant {
  id             String       @id @default(cuid())
  conversationId String
  userId         Int
  joinedAt       DateTime     @default(now())
  role           String       @default("MEMBER")
  unreadCount    Int          @default(0)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       Int
  content        String
  isRead         Boolean      @default(false)
  isSystem       Boolean      @default(false)
  systemType     String?
  sentAt         DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  isDeleted      Boolean      @default(false)
  attachments    Attachment[]
  sender         User         @relation("MessageSender", fields: [senderId], references: [id])
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  readBy         User[]       @relation("MessageReadBy")
}

model Attachment {
  id           String   @id @default(cuid())
  messageId    String
  fileName     String
  fileUrl      String
  fileType     String
  mimeType     String
  fileSize     Int
  thumbnailUrl String?
  uploadedAt   DateTime @default(now())
  uploadStatus String   @default("COMPLETE")
  message      Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
}

model CheckIn {
  id           String     @id @default(cuid())
  mentorshipId String
  scheduledFor DateTime
  completedAt  DateTime?
  summary      String?
  nextSteps    String?
  progress     String?
  mood         String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  mentorship   Mentorship @relation(fields: [mentorshipId], references: [id], onDelete: Cascade)
}

model CareerPath {
  id             String           @id @default(cuid())
  name           String
  description    String?
  estimatedTime  String?
  creatorId      String
  isPublic       Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  creator        MentorProfile    @relation(fields: [creatorId], references: [id])
  milestones     Milestone[]
  students       StudentProfile[]
  relatedCourses Course[]         @relation("CareerPathToCourse")
}

model Milestone {
  id             String              @id @default(cuid())
  careerPathId   String
  title          String
  description    String?
  position       Int
  estimatedHours Int?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  careerPath     CareerPath          @relation(fields: [careerPathId], references: [id], onDelete: Cascade)
  progress       MilestoneProgress[]
  resources      Resource[]
}

model Resource {
  id          String     @id @default(cuid())
  title       String
  description String?
  url         String
  type        String     @default("ARTICLE")
  moduleId    String?
  lessonId    String?
  milestoneId String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  milestone   Milestone? @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  lesson      Lesson?    @relation("LessonResources", fields: [lessonId], references: [id], onDelete: Cascade)
  module      Module?    @relation(fields: [moduleId], references: [id], onDelete: Cascade)
}

model MilestoneProgress {
  id          String         @id @default(cuid())
  studentId   String
  milestoneId String
  completed   Boolean        @default(false)
  completedAt DateTime?
  notes       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  milestone   Milestone      @relation(fields: [milestoneId], references: [id], onDelete: Cascade)
  student     StudentProfile @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([studentId, milestoneId])
}

model MentorReview {
  id        String        @id @default(cuid())
  mentorId  String
  studentId String
  rating    Int
  comment   String?
  createdAt DateTime      @default(now())
  mentor    MentorProfile @relation(fields: [mentorId], references: [id], onDelete: Cascade)

  @@unique([mentorId, studentId])
}

model Quiz {
  id              String        @id @default(cuid())
  title           String
  description     String?
  timeLimit       Int?
  passingScore    Int           @default(70)
  attemptsAllowed Int           @default(3)
  isPublished     Boolean       @default(false)
  courseId        String
  moduleId        String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  lesson          Lesson?       @relation("LessonToQuiz")
  questions       Question[]
  module          Module?       @relation("ModuleQuizzes", fields: [moduleId], references: [id], onDelete: Cascade)
  course          Course        @relation("CourseQuizzes", fields: [courseId], references: [id], onDelete: Cascade)
  attempts        QuizAttempt[]
}

model Question {
  id             String           @id @default(cuid())
  quizId         String
  questionText   String
  questionType   String           @default("MULTIPLE_CHOICE")
  points         Int              @default(1)
  position       Int
  explanation    String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  quiz           Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  options        QuestionOption[] @relation("QuestionOptions")
  userAnswers    UserAnswer[]
  correctAnswers QuestionOption[] @relation("CorrectAnswers")
}

model QuestionOption {
  id           String       @id @default(cuid())
  questionId   String
  optionText   String
  position     Int
  createdAt    DateTime     @default(now())
  question     Question     @relation("QuestionOptions", fields: [questionId], references: [id], onDelete: Cascade)
  isCorrectFor Question[]   @relation("CorrectAnswers")
  userAnswers  UserAnswer[] @relation("QuestionOptionToUserAnswer")
}

model QuizAttempt {
  id            String       @id @default(cuid())
  userId        Int
  quizId        String
  score         Int?
  isPassed      Boolean      @default(false)
  startedAt     DateTime     @default(now())
  completedAt   DateTime?
  feedbackGiven String?
  quiz          Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user          User         @relation("UserQuizAttempts", fields: [userId], references: [id], onDelete: Cascade)
  userAnswers   UserAnswer[]
}

model UserAnswer {
  id              String           @id @default(cuid())
  attemptId       String
  questionId      String
  textAnswer      String?
  isCorrect       Boolean          @default(false)
  pointsEarned    Int              @default(0)
  submittedAt     DateTime         @default(now())
  question        Question         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempt         QuizAttempt      @relation(fields: [attemptId], references: [id], onDelete: Cascade)
  selectedOptions QuestionOption[] @relation("QuestionOptionToUserAnswer")
}

model Forum {
  id          String      @id @default(cuid())
  title       String
  description String?
  courseId    String
  moduleId    String?
  isGlobal    Boolean     @default(false)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  module      Module?     @relation("ModuleForums", fields: [moduleId], references: [id], onDelete: Cascade)
  course      Course      @relation("CourseForums", fields: [courseId], references: [id], onDelete: Cascade)
  posts       ForumPost[]

  @@index([moduleId])
}

model ForumPost {
  id        String         @id @default(cuid())
  forumId   String
  authorId  Int
  title     String
  content   String
  isPinned  Boolean        @default(false)
  isLocked  Boolean        @default(false)
  viewCount Int            @default(0)
  likes     Int            @default(0)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  comments  ForumComment[]
  author    User           @relation("PostAuthor", fields: [authorId], references: [id])
  forum     Forum          @relation(fields: [forumId], references: [id], onDelete: Cascade)
}

model ForumComment {
  id              String    @id @default(cuid())
  postId          String
  authorId        Int
  content         String
  parentCommentId String?
  likes           Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  author          User      @relation("CommentAuthor", fields: [authorId], references: [id])
  post            ForumPost @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model Notification {
  id          String   @id @default(cuid())
  userId      Int
  title       String
  message     String
  type        String
  isRead      Boolean  @default(false)
  linkUrl     String?
  relatedId   String?
  relatedType String?
  createdAt   DateTime @default(now())
  user        User     @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
}

model LearningMetric {
  id         String   @id @default(cuid())
  userId     Int
  metricType String
  metricData String
  timestamp  DateTime @default(now())
  user       User     @relation("UserLearningMetrics", fields: [userId], references: [id], onDelete: Cascade)
}

model CourseAnalytic {
  id           String   @id @default(cuid())
  courseId     String
  analyticType String
  analyticData String
  timestamp    DateTime @default(now())
  course       Course   @relation("CourseAnalytics", fields: [courseId], references: [id], onDelete: Cascade)
}

model UserStats {
  id                     String   @id @default(cuid())
  userId                 Int      @unique
  level                  Int      @default(1)
  currentXP              Int      @default(0)
  nextLevelXP            Int      @default(100)
  totalScholarshipAmount Int      @default(0)
  activeDiscounts        Int      @default(0)
  completedCourses       Int      @default(0)
  forumContributions     Int      @default(0)
  mentorshipHours        Int      @default(0)
  lastUpdated            DateTime @default(now())
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Achievement {
  id                String            @id @default(cuid())
  type              String
  title             String
  description       String
  icon              String?
  category          String
  amount            Int?
  currency          String?
  validUntil        DateTime?
  discountPercent   Int?
  applicableCourses String?
  referralCount     Int?
  studentsHelped    Int?
  averageRating     Float?
  helpfulAnswers    Int?
  issuer            String?
  company           String?
  position          String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  userAchievements  UserAchievement[]
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        Int
  achievementId String
  earnedAt      DateTime    @default(now())
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation("UserAchievements", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
}

model ShowcaseProject {
  id            String             @id @default(cuid())
  title         String
  description   String?
  imageUrl      String?
  repositoryUrl String?
  demoUrl       String?
  studentId     Int
  courseId      String
  submissionId  String?
  featured      Boolean            @default(false)
  category      String?
  tags          String?
  showcasedAt   DateTime           @default(now())
  viewCount     Int                @default(0)
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  submission    ProjectSubmission? @relation("SubmissionShowcaseProjects", fields: [submissionId], references: [id])
  course        Course             @relation("CourseShowcaseProjects", fields: [courseId], references: [id], onDelete: Cascade)
  student       User               @relation("StudentShowcaseProjects", fields: [studentId], references: [id], onDelete: Cascade)
}

model Project {
  id                         String              @id @default(cuid())
  title                      String
  description                String?
  instructions               String?
  dueDate                    DateTime?
  pointsValue                Int                 @default(10)
  isPublished                Boolean             @default(false)
  courseId                   String
  moduleId                   String?
  isRequiredForCertification Boolean             @default(true)
  createdAt                  DateTime            @default(now())
  updatedAt                  DateTime            @updatedAt
  module                     Module?             @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  course                     Course              @relation("CourseProjects", fields: [courseId], references: [id], onDelete: Cascade)
  submissions                ProjectSubmission[]
}

model ProjectSubmission {
  id               String              @id @default(cuid())
  projectId        String
  studentId        Int
  submissionUrl    String?
  submissionText   String?
  submissionFiles  String?
  status           String              @default("SUBMITTED")
  grade            Int?
  feedback         String?
  reviewerId       Int?
  revisionCount    Int                 @default(0)
  submittedAt      DateTime            @default(now())
  reviewedAt       DateTime?
  updatedAt        DateTime            @updatedAt
  reviewer         User?               @relation("InstructorReviews", fields: [reviewerId], references: [id])
  student          User                @relation("StudentSubmissions", fields: [studentId], references: [id], onDelete: Cascade)
  project          Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  showcaseProjects ShowcaseProject[]   @relation("SubmissionShowcaseProjects")
  response         SubmissionResponse?
  certifications   Certification[]     @relation("CertificationToProjectSubmission")

  @@unique([projectId, studentId])
}

model Certification {
  id               String              @id @default(cuid())
  title            String
  description      String?
  certificateType  String              @default("COURSE_COMPLETION")
  tokenId          String?
  contractAddress  String?
  txHash           String?
  ipfsMetadataUrl  String?
  isRevoked        Boolean             @default(false)
  studentId        Int
  courseId         String
  issuedAt         DateTime            @default(now())
  expiresAt        DateTime?
  revokedAt        DateTime?
  verificationUrl  String?
  verificationCode String?
  course           Course              @relation("CourseCertifications", fields: [courseId], references: [id], onDelete: Cascade)
  student          User                @relation("StudentCertifications", fields: [studentId], references: [id], onDelete: Cascade)
  submissions      ProjectSubmission[] @relation("CertificationToProjectSubmission")
}

model SubmissionResponse {
  id           String            @id @default(cuid())
  submissionId String            @unique
  studentId    Int
  content      String
  isRead       Boolean           @default(false)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  student      User              @relation("StudentResponses", fields: [studentId], references: [id], onDelete: Cascade)
  submission   ProjectSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
}

model CourseApprovalHistory {
  id         String   @id @default(cuid())
  courseId   String
  action     String
  comments   String?
  reviewerId Int?
  createdAt  DateTime @default(now())
  reviewer   User?    @relation("CourseReviewer", fields: [reviewerId], references: [id])
  course     Course   @relation("CourseApprovalHistory", fields: [courseId], references: [id], onDelete: Cascade)

  @@index([courseId])
  @@index([reviewerId])
}
