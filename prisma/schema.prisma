generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
  COMPLETED
  DROPPED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ProjectEnrollmentStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  DRAFT
}

enum SubmissionType {
  TEXT
  FILE
  REPOSITORY
}

enum SubmissionStatus {
  PENDING
  SUBMITTED
  GRADING
  GRADED
  REJECTED
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Authenticator {
  credentialID         String  @id
  credentialPublicKey  String  @unique
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  userId               String
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("authenticators")
}

model User {
  id                    String                    @id @default(cuid())
  name                  String?
  email                 String?                   @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  String                    @default("STUDENT")
  points                Int                       @default(0)
  level                 Int                       @default(1)
  needsOnboarding       Boolean                   @default(false)
  walletAddress         String?                   @unique
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  userAchievements      UserAchievement[]
  accounts              Account[]
  activityLogs          ActivityLog[]
  assignmentSubmissions AssignmentSubmission[]
  authenticators        Authenticator[]
  certifications        Certification[]
  codeCommits           CodeCommit[]              @relation("StudentCommits")
  conversations         ConversationParticipant[]
  instructorCourses     Course[]                  @relation("InstructorCourses")
  enrollments           Enrollment[]
  lessonProgress        LessonProgress[]
  lessonViews           LessonView[]
  mentorProfile         MentorProfile?
  menteeSessions        MentorSession[]           @relation("MenteeSessions")
  mentorSessions        MentorSession[]           @relation("MentorSessions")
  receivedMessages      Message[]                 @relation("MessageReceiver")
  sentMessages          Message[]                 @relation("MessageSender")
  notifications         Notification[]
  posts                 Post[]
  likedProjects         ProjectLike[]
  instructorMarks       ProjectMark[]             @relation("InstructorMarks")
  studentMarks          ProjectMark[]             @relation("StudentMarks")
  projectSubmissions    ProjectSubmission[]       @relation("StudentSubmissions")
  quizAttempts          QuizAttempt[]
  sessions              Session[]
  showcaseProjects      ShowcaseProject[]
  studentProfile        StudentProfile?
  courseInvitations     CourseInvitation[]    @relation("CourseInvitations")
  createdCareerPaths    CareerPath[]          @relation("CreatedCareerPaths")
  careerPathEnrollments CareerPathEnrollment[] @relation("CareerPathEnrollments")
  
  // Billing relations
  subscription          Subscription?
  paymentMethods        PaymentMethod[]
  invoices              Invoice[]
  mentorEarnings        MentorEarning[]       @relation("MentorEarnings")
  menteePayments        MentorEarning[]       @relation("MenteePayments")
  instructorRevenues    InstructorRevenue[]   @relation("InstructorRevenues")
  payouts               Payout[]
  auditLogs             AuditLog[]

  @@map("users")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  action    String
  description String
  metadata  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("audit_logs")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?
  instructorId String
  instructor   User     @relation("InstructorCourses", fields: [instructorId], references: [id])
  assignments  Assignment[] @relation("CourseAssignments")
  lessons      Lesson[] @relation("CourseLessons")
  quizzes      Quiz[] @relation("CourseQuizzes")
  modules      Module[] @relation("CourseModules")
  enrollments  Enrollment[] @relation("CourseEnrollments")
  invitations  CourseInvitation[] @relation("CourseInvitations")
  revenues     InstructorRevenue[] @relation("CourseInstructorRevenues")
  certifications Certification[] @relation("CourseCertifications")
  activityLogs ActivityLog[] @relation("CourseActivityLogs")
  conversations Conversation[] @relation("CourseConversations")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("courses")
}

model Page {
  id          String   @id @default(cuid())
  title       String
  content     String?
  description String?
  moduleId    String
  isPublished Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  updatedBy   String
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@index([moduleId])
  @@map("pages")
}

model Module {
  id           String        @id @default(cuid())
  title        String
  description  String?
  order        Int           @default(0)
  isPublished  Boolean       @default(false)
  courseId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  projects     Project[]
  activityLogs ActivityLog[] @relation("ModuleActivityLogs")
  assignments  Assignment[]
  forums       Forum[]
  lessons      Lesson[]
  course       Course        @relation("CourseModules", fields: [courseId], references: [id], onDelete: Cascade)
  pages        Page[]
  quizzes      Quiz[]

  @@map("modules")
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  moduleId    String
  courseId    String
  module      Module   @relation(fields: [moduleId], references: [id])
  course      Course   @relation("CourseLessons", fields: [courseId], references: [id])
  views       LessonView[]
  progress    LessonProgress[]
  activityLogs ActivityLog[] @relation("LessonActivityLogs")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("lessons")
}

model Assignment {
  id          String   @id @default(cuid())
  title       String
  description String?
  points      Int      @default(0)
  moduleId    String
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id])
  course      Course   @relation("CourseAssignments", fields: [courseId], references: [id])
  submissions AssignmentSubmission[]
  rubricId    String?
  rubric      Rubric?   @relation(fields: [rubricId], references: [id])
  activityLogs ActivityLog[] @relation("AssignmentActivityLogs")

  @@map("assignments")
}

model Quiz {
  id          String   @id @default(cuid())
  title       String
  description String?
  passingScore Int      @default(0)
  points      Int      @default(0)
  moduleId    String
  courseId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id])
  course      Course   @relation("CourseQuizzes", fields: [courseId], references: [id])
  attempts    QuizAttempt[]
  activityLogs ActivityLog[] @relation("QuizActivityLogs")

  @@map("quizzes")
}

model Forum {
  id          String   @id @default(cuid())
  title       String
  description String?
  isActive    Boolean  @default(true)
  moduleId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  posts       Post[]

  @@map("forums")
}

model Post {
  id        String   @id @default(cuid())
  content   String
  userId    String
  forumId   String
  parentId  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  parent    Post?    @relation("PostHierarchy", fields: [parentId], references: [id])
  replies   Post[]   @relation("PostHierarchy")
  forum     Forum    @relation(fields: [forumId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model AssignmentSubmission {
  id           String     @id @default(cuid())
  content      String?
  fileUrl      String?
  grade        Float?
  feedback     String?
  status       String     @default("DRAFT")
  submittedAt  DateTime?
  gradedAt     DateTime?
  assignmentId String
  userId       String
  student      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignment   Assignment @relation(fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("assignment_submissions")
}

model Rubric {
  id          String       @id @default(cuid())
  title       String
  description String?
  isDefault   Boolean      @default(false)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  assignments Assignment[]
  items       RubricItem[]

  @@map("rubrics")
}

model RubricItem {
  id          String   @id @default(cuid())
  rubricId    String
  title       String
  description String?
  points      Int
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  rubric      Rubric   @relation(fields: [rubricId], references: [id], onDelete: Cascade)

  @@map("rubric_items")
}

model StudentProfile {
  id           String              @id @default(cuid())
  userId       String              @unique
  bio          String?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  sentRequests MentorshipRequest[] @relation("SentRequests")
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("student_profiles")
}

model MentorshipRequest {
  id        String         @id @default(cuid())
  message   String
  status    String         @default("PENDING")
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  mentorId  String
  studentId String
  student   StudentProfile @relation("SentRequests", fields: [studentId], references: [id])
  mentor    MentorProfile  @relation("ReceivedRequests", fields: [mentorId], references: [id])

  @@map("mentorship_requests")
}

model MentorProfile {
  id                      String              @id @default(cuid())
  userId                  String              @unique
  bio                     String?
  specialties             String?
  yearsOfExperience       String?
  mentorshipPhilosophy    String?
  credentials             String?
  hourlyRate              String?
  availabilityPreference  String?
  sessionDuration         String?
  rating                  Float               @default(0)
  reviewCount             Int                 @default(0)
  createdAt               DateTime            @default(now())
  updatedAt               DateTime            @updatedAt
  user                    User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  receivedRequests        MentorshipRequest[] @relation("ReceivedRequests")

  @@map("mentor_profiles")
}

model Achievement {
  id               String            @id @default(cuid())
  type             String
  title            String
  description      String
  icon             String?
  category         String
  amount           Float?
  currency         String?
  validUntil       DateTime?
  discountPercent  Int?
  issuer           String?
  company          String?
  position         String?
  skillLevel       String?
  courseId         String?
  xpEarned         Int?
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userAchievements UserAchievement[]

  @@index([type])
  @@index([category])
}

model UserAchievement {
  id            String      @id @default(cuid())
  userId        String
  achievementId String
  earnedAt      DateTime    @default(now())
  metadata      String?     @default("{}")
  achievement   Achievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, achievementId])
  @@index([userId])
  @@index([achievementId])
  @@index([earnedAt])
}

model Enrollment {
  id          String              @id @default(cuid())
  courseId    String
  userId      String
  status      EnrollmentStatus    @default(ACTIVE)
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  certification   Certification? @relation("EnrollmentCertification")
  course          Course         @relation("CourseEnrollments", fields: [courseId], references: [id], onDelete: Cascade)
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  projectEnrollments ProjectEnrollment[]
}

model ProjectEnrollment {
  id              String              @id @default(cuid())
  projectId       String
  enrollmentId    String
  status          ProjectEnrollmentStatus @default(NOT_STARTED)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  project         Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  enrollment      Enrollment          @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
  submissions     ProjectSubmission[]
}

model Certification {
  id                  String             @id @default(cuid())
  userId              String
  courseId            String
  enrollmentId        String             @unique
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
  enrollment          Enrollment         @relation("EnrollmentCertification", fields: [enrollmentId], references: [id])
  course              Course             @relation("CourseCertifications", fields: [courseId], references: [id], onDelete: Cascade)
  user                User               @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MentorSession {
  id            String         @id @default(cuid())
  mentorId      String
  menteeId      String
  title         String
  description   String?
  status        String         @default("SCHEDULED")
  scheduledAt   DateTime
  duration      Int
  meetingUrl    String?
  notes         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  conversations Conversation[]
  mentee        User           @relation("MenteeSessions", fields: [menteeId], references: [id])
  mentor        User           @relation("MentorSessions", fields: [mentorId], references: [id])
  earnings      MentorEarning[]

  @@index([mentorId])
  @@index([menteeId])
}

model Quiz {
  id                 String        @id @default(cuid())
  title              String
  description        String?
  moduleId           String
  timeLimit          Int?
  passingScore       Int           @default(70)
  attemptsAllowed    Int?          @default(1)
  showCorrectAnswers Boolean       @default(true)
  isPublished        Boolean       @default(false)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  activityLogs       ActivityLog[]
  questions          Question[]
  attempts           QuizAttempt[]
  module             Module        @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}

model Question {
  id          String           @id @default(cuid())
  quizId      String
  text        String
  type        String
  order       Int              @default(0)
  points      Int              @default(1)
  explanation String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  options     QuestionOption[]
  quiz        Quiz             @relation(fields: [quizId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]

  @@map("questions")
}

model Conversation {
  id          String              @id @default(cuid())
  title       String
  courseId    String?
  mentorshipId String?
  mentorship   MentorSession?            @relation(fields: [mentorshipId], references: [id])
  course       Course?                   @relation("CourseConversations", fields: [courseId], references: [id])
  messages     Message[]
  participants ConversationParticipant[]
}

model ConversationParticipant {
  id                String       @id @default(cuid())
  conversationId    String
  userId            String
  role              String
  unreadCount       Int          @default(0)
  lastReadMessageId String?
  createdAt         DateTime     @default(now())
  lastReadMessage   Message?     @relation(fields: [lastReadMessageId], references: [id])
  user              User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversation      Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
}

model Message {
  id             String                    @id @default(cuid())
  conversationId String
  senderId       String
  receiverId     String?
  content        String
  isRead         Boolean                   @default(false)
  sentAt         DateTime                  @default(now())
  updatedAt      DateTime                  @updatedAt
  lastReadBy     ConversationParticipant[]
  receiver       User?                     @relation("MessageReceiver", fields: [receiverId], references: [id])
  sender         User                      @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  conversation   Conversation              @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model QuestionOption {
  id          String       @id @default(cuid())
  questionId  String
  text        String
  isCorrect   Boolean      @default(false)
  order       Int          @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  question    Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
  userAnswers UserAnswer[]

  @@map("question_options")
}

model QuizAttempt {
  id          String       @id @default(cuid())
  quizId      String
  userId      String
  score       Float?
  completed   Boolean      @default(false)
  startedAt   DateTime     @default(now())
  submittedAt DateTime?
  timeSpent   Int?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz        Quiz         @relation(fields: [quizId], references: [id], onDelete: Cascade)
  answers     UserAnswer[]

  @@map("quiz_attempts")
}

model UserAnswer {
  id             String          @id @default(cuid())
  attemptId      String
  questionId     String
  optionId       String?
  textAnswer     String?
  isCorrect      Boolean         @default(false)
  pointsAwarded  Float?
  gradedAt       DateTime?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  selectedOption QuestionOption? @relation(fields: [optionId], references: [id], onDelete: Cascade)
  question       Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  attempt        QuizAttempt     @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  @@map("user_answers")
}

model ActivityLog {
  id            String   @id @default(cuid())
  userId        String
  action        String
  details       Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  moduleId      String?
  quizId        String?
  projectId     String?
  lessonId      String?
  assignmentId  String?
  quiz          Quiz?    @relation("QuizActivityLogs", fields: [quizId], references: [id], onDelete: Cascade)
  project       Project? @relation("ProjectActivityLogs", fields: [projectId], references: [id], onDelete: Cascade)
  lesson        Lesson?  @relation("LessonActivityLogs", fields: [lessonId], references: [id], onDelete: Cascade)
  assignment    Assignment? @relation("AssignmentActivityLogs", fields: [assignmentId], references: [id], onDelete: Cascade)

  @@map("activity_logs")
}

model CodeCommit {
  id            String   @id @default(cuid())
  projectId     String
  studentId     String
  commitHash    String
  message       String
  branch        String   @default("main")
  repositoryUrl String?
  filesChanged  Int      @default(0)
  linesAdded    Int      @default(0)
  linesDeleted  Int      @default(0)
  commitDate    DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  student       User     @relation("StudentCommits", fields: [studentId], references: [id], onDelete: Cascade)
  project       Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, studentId, commitHash])
}

model Lesson {
  id          String   @id @default(cuid())
  title       String
  description String?
  moduleId    String
  courseId    String
  duration    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id])
  course      Course   @relation("CourseLessons", fields: [courseId], references: [id])
  views       LessonView[]
  progress    LessonProgress[]
  activityLogs ActivityLog[] @relation("LessonActivityLogs")

  @@map("lessons")
}

model LessonView {
  id        String   @id @default(cuid())
  lessonId  String
  studentId String
  viewedAt  DateTime @default(now())
  lesson    Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student   User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
  @@map("lesson_views")
}

model LessonProgress {
  id          String   @id @default(cuid())
  lessonId    String
  studentId   String
  completed   Boolean  @default(false)
  startedAt   DateTime @default(now())
  completedAt DateTime?
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@unique([lessonId, studentId])
  @@map("lesson_progress")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?
  moduleId    String
  courseId    String
  points      Int      @default(0)
  dueDate     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  module      Module   @relation(fields: [moduleId], references: [id])
  course      Course   @relation("CourseProjects", fields: [courseId], references: [id])
  submissions ProjectSubmission[]
  activityLogs ActivityLog[] @relation("ProjectActivityLogs")

  @@map("projects")
}

model ProjectSubmission {
  id          String   @id @default(cuid())
  projectId   String
  studentId   String
  submissionType SubmissionType
  content     Json
  grade       Float?
  feedback    String?
  status      SubmissionStatus
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  project     Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  student     User     @relation(fields: [studentId], references: [id], onDelete: Cascade)
  activityLogs ActivityLog[] @relation("ProjectSubmissionActivityLogs")

  @@map("project_submissions")
}

model ProjectMark {
  id           String    @id @default(cuid())
  projectId    String
  studentId    String
  submissionId String?
  instructorId String
  grade        Float
  letterGrade  String?
  feedback     String?
  rubricScores Json?
  markedAt     DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  project     Project           @relation(fields: [projectId], references: [id], onDelete: Cascade)
  student     User              @relation("StudentMarks", fields: [studentId], references: [id], onDelete: Cascade)
  submission  ProjectSubmission? @relation(fields: [submissionId], references: [id])
  instructor  User              @relation("InstructorMarks", fields: [instructorId], references: [id], onDelete: Cascade)

  @@unique([projectId, studentId])
  @@map("project_marks")
}

model CourseInvitation {
  id         String   @id @default(cuid())
  email      String
  courseId   String
  invitedBy  String
  message    String?
  status     InvitationStatus @default(PENDING)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  course        Course @relation("CourseInvitations", fields: [courseId], references: [id], onDelete: Cascade)
  invitedByUser User   @relation("CourseInvitations", fields: [invitedBy], references: [id], onDelete: Cascade)
  enrollment  Enrollment?
}

model CareerPath {
  id                String              @id @default(cuid())
  title             String
  description       String
  category          String
  difficulty        String              @default("BEGINNER")
  estimatedDuration String?
  tags              String?
  isPublished       Boolean             @default(false)
  createdBy         String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relations
  creator           User                @relation("CreatedCareerPaths", fields: [createdBy], references: [id], onDelete: Cascade)
  milestones        CareerPathMilestone[]
  enrollments       CareerPathEnrollment[]
  
  @@index([createdBy])
  @@index([category])
  @@index([isPublished])
  @@map("career_paths")
}

model CareerPathMilestone {
  id           String     @id @default(cuid())
  careerPathId String
  title        String
  description  String?
  order        Int        @default(0)
  isCompleted  Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  
  // Relations
  careerPath   CareerPath @relation(fields: [careerPathId], references: [id], onDelete: Cascade)
  
  @@index([careerPathId])
  @@index([order])
  @@map("career_path_milestones")
}

model CareerPathEnrollment {
  id           String     @id @default(cuid())
  careerPathId String
  userId       String
  status       String     @default("ACTIVE")
  progress     Int        @default(0)
  enrolledAt   DateTime   @default(now())
  completedAt  DateTime?
  
  // Relations
  careerPath   CareerPath @relation(fields: [careerPathId], references: [id], onDelete: Cascade)
  user         User       @relation("CareerPathEnrollments", fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([careerPathId, userId])
  @@index([userId])
  @@index([status])
  @@map("career_path_enrollments")
}

// Billing and Payment Models
model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  plan            String   // 'basic', 'premium', 'annual'
  status          String   // 'active', 'cancelled', 'expired', 'past_due'
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd  Boolean @default(false)
  price           Float
  interval        String   // 'monthly', 'yearly'
  stripeSubscriptionId String? @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices        Invoice[]
  
  @@index([userId])
  @@index([status])
  @@map("subscriptions")
}

model PaymentMethod {
  id              String   @id @default(cuid())
  userId          String
  type            String   // 'credit_card', 'bank_account'
  brand           String   // 'visa', 'mastercard', etc.
  last4           String
  expMonth        Int?
  expYear         Int?
  isDefault       Boolean  @default(false)
  cardholderName  String?
  stripePaymentMethodId String? @unique
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices        Invoice[]
  
  @@index([userId])
  @@map("payment_methods")
}



model Invoice {
  id              String   @id @default(cuid())
  userId          String
  subscriptionId  String?
  paymentMethodId String?
  amount          Float
  currency        String   @default("usd")
  status          String   // 'paid', 'pending', 'failed', 'cancelled'
  description     String
  invoiceUrl      String?
  stripeInvoiceId String?  @unique
  paidAt          DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscription    Subscription?  @relation(fields: [subscriptionId], references: [id], onDelete: SetNull)
  paymentMethod   PaymentMethod? @relation(fields: [paymentMethodId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([status])
  @@index([createdAt])
  @@map("invoices")
}

model MentorEarning {
  id              String   @id @default(cuid())
  mentorId        String
  sessionId       String?
  amount          Float
  currency        String   @default("usd")
  status          String   // 'pending', 'completed', 'paid_out'
  description     String
  sessionType     String?  // '1-hour session', '2-hour session', etc.
  menteeId        String?
  menteeName      String?
  earnedAt        DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  mentor          User     @relation("MentorEarnings", fields: [mentorId], references: [id], onDelete: Cascade)
  mentee          User?    @relation("MenteePayments", fields: [menteeId], references: [id], onDelete: SetNull)
  session         MentorSession? @relation(fields: [sessionId], references: [id], onDelete: SetNull)
  
  @@index([mentorId])
  @@index([status])
  @@index([earnedAt])
  @@map("mentor_earnings")
}

model InstructorRevenue {
  id              String   @id @default(cuid())
  instructorId    String
  courseId        String?
  amount          Float
  currency        String   @default("usd")
  status          String   // 'pending', 'completed', 'paid_out'
  description     String
  revenueType     String   // 'course_sale', 'subscription'
  studentCount    Int      @default(0)
  courseName      String?
  earnedAt        DateTime @default(now())
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  instructor      User     @relation("InstructorRevenues", fields: [instructorId], references: [id], onDelete: Cascade)
  course          Course?  @relation(fields: [courseId], references: [id], onDelete: SetNull)
  
  @@index([instructorId])
  @@index([status])
  @@index([earnedAt])
  @@map("instructor_revenues")
}

model Payout {
  id              String   @id @default(cuid())
  userId          String
  amount          Float
  currency        String   @default("usd")
  status          String   // 'pending', 'processing', 'completed', 'failed'
  method          String   // 'bank_transfer', 'paypal', etc.
  reference       String?
  stripePayoutId  String?  @unique
  requestedAt     DateTime @default(now())
  processedAt     DateTime?
  completedAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([status])
  @@index([requestedAt])
  @@map("payouts")
}
